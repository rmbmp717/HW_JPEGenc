package DCT_2D

file_number 0 "./src/DCT_2D.x"

fn __DCT_2D__zeros_2d() -> bits[8][8][8] {
  literal.1: bits[8] = literal(value=0, id=1, pos=[(0,160,11)])
  literal.2: bits[8] = literal(value=0, id=2, pos=[(0,160,17)])
  literal.3: bits[8] = literal(value=0, id=3, pos=[(0,160,23)])
  literal.4: bits[8] = literal(value=0, id=4, pos=[(0,160,29)])
  literal.5: bits[8] = literal(value=0, id=5, pos=[(0,160,35)])
  literal.6: bits[8] = literal(value=0, id=6, pos=[(0,160,41)])
  literal.7: bits[8] = literal(value=0, id=7, pos=[(0,160,47)])
  literal.8: bits[8] = literal(value=0, id=8, pos=[(0,160,53)])
  literal.10: bits[8] = literal(value=0, id=10, pos=[(0,161,11)])
  literal.11: bits[8] = literal(value=0, id=11, pos=[(0,161,17)])
  literal.12: bits[8] = literal(value=0, id=12, pos=[(0,161,23)])
  literal.13: bits[8] = literal(value=0, id=13, pos=[(0,161,29)])
  literal.14: bits[8] = literal(value=0, id=14, pos=[(0,161,35)])
  literal.15: bits[8] = literal(value=0, id=15, pos=[(0,161,41)])
  literal.16: bits[8] = literal(value=0, id=16, pos=[(0,161,47)])
  literal.17: bits[8] = literal(value=0, id=17, pos=[(0,161,53)])
  literal.19: bits[8] = literal(value=0, id=19, pos=[(0,162,11)])
  literal.20: bits[8] = literal(value=0, id=20, pos=[(0,162,17)])
  literal.21: bits[8] = literal(value=0, id=21, pos=[(0,162,23)])
  literal.22: bits[8] = literal(value=0, id=22, pos=[(0,162,29)])
  literal.23: bits[8] = literal(value=0, id=23, pos=[(0,162,35)])
  literal.24: bits[8] = literal(value=0, id=24, pos=[(0,162,41)])
  literal.25: bits[8] = literal(value=0, id=25, pos=[(0,162,47)])
  literal.26: bits[8] = literal(value=0, id=26, pos=[(0,162,53)])
  literal.28: bits[8] = literal(value=0, id=28, pos=[(0,163,11)])
  literal.29: bits[8] = literal(value=0, id=29, pos=[(0,163,17)])
  literal.30: bits[8] = literal(value=0, id=30, pos=[(0,163,23)])
  literal.31: bits[8] = literal(value=0, id=31, pos=[(0,163,29)])
  literal.32: bits[8] = literal(value=0, id=32, pos=[(0,163,35)])
  literal.33: bits[8] = literal(value=0, id=33, pos=[(0,163,41)])
  literal.34: bits[8] = literal(value=0, id=34, pos=[(0,163,47)])
  literal.35: bits[8] = literal(value=0, id=35, pos=[(0,163,53)])
  literal.37: bits[8] = literal(value=0, id=37, pos=[(0,164,11)])
  literal.38: bits[8] = literal(value=0, id=38, pos=[(0,164,17)])
  literal.39: bits[8] = literal(value=0, id=39, pos=[(0,164,23)])
  literal.40: bits[8] = literal(value=0, id=40, pos=[(0,164,29)])
  literal.41: bits[8] = literal(value=0, id=41, pos=[(0,164,35)])
  literal.42: bits[8] = literal(value=0, id=42, pos=[(0,164,41)])
  literal.43: bits[8] = literal(value=0, id=43, pos=[(0,164,47)])
  literal.44: bits[8] = literal(value=0, id=44, pos=[(0,164,53)])
  literal.46: bits[8] = literal(value=0, id=46, pos=[(0,165,11)])
  literal.47: bits[8] = literal(value=0, id=47, pos=[(0,165,17)])
  literal.48: bits[8] = literal(value=0, id=48, pos=[(0,165,23)])
  literal.49: bits[8] = literal(value=0, id=49, pos=[(0,165,29)])
  literal.50: bits[8] = literal(value=0, id=50, pos=[(0,165,35)])
  literal.51: bits[8] = literal(value=0, id=51, pos=[(0,165,41)])
  literal.52: bits[8] = literal(value=0, id=52, pos=[(0,165,47)])
  literal.53: bits[8] = literal(value=0, id=53, pos=[(0,165,53)])
  literal.55: bits[8] = literal(value=0, id=55, pos=[(0,166,11)])
  literal.56: bits[8] = literal(value=0, id=56, pos=[(0,166,17)])
  literal.57: bits[8] = literal(value=0, id=57, pos=[(0,166,23)])
  literal.58: bits[8] = literal(value=0, id=58, pos=[(0,166,29)])
  literal.59: bits[8] = literal(value=0, id=59, pos=[(0,166,35)])
  literal.60: bits[8] = literal(value=0, id=60, pos=[(0,166,41)])
  literal.61: bits[8] = literal(value=0, id=61, pos=[(0,166,47)])
  literal.62: bits[8] = literal(value=0, id=62, pos=[(0,166,53)])
  literal.64: bits[8] = literal(value=0, id=64, pos=[(0,167,11)])
  literal.65: bits[8] = literal(value=0, id=65, pos=[(0,167,17)])
  literal.66: bits[8] = literal(value=0, id=66, pos=[(0,167,23)])
  literal.67: bits[8] = literal(value=0, id=67, pos=[(0,167,29)])
  literal.68: bits[8] = literal(value=0, id=68, pos=[(0,167,35)])
  literal.69: bits[8] = literal(value=0, id=69, pos=[(0,167,41)])
  literal.70: bits[8] = literal(value=0, id=70, pos=[(0,167,47)])
  literal.71: bits[8] = literal(value=0, id=71, pos=[(0,167,53)])
  array.9: bits[8][8] = array(literal.1, literal.2, literal.3, literal.4, literal.5, literal.6, literal.7, literal.8, id=9, pos=[(0,160,9)])
  array.18: bits[8][8] = array(literal.10, literal.11, literal.12, literal.13, literal.14, literal.15, literal.16, literal.17, id=18, pos=[(0,161,9)])
  array.27: bits[8][8] = array(literal.19, literal.20, literal.21, literal.22, literal.23, literal.24, literal.25, literal.26, id=27, pos=[(0,162,9)])
  array.36: bits[8][8] = array(literal.28, literal.29, literal.30, literal.31, literal.32, literal.33, literal.34, literal.35, id=36, pos=[(0,163,9)])
  array.45: bits[8][8] = array(literal.37, literal.38, literal.39, literal.40, literal.41, literal.42, literal.43, literal.44, id=45, pos=[(0,164,9)])
  array.54: bits[8][8] = array(literal.46, literal.47, literal.48, literal.49, literal.50, literal.51, literal.52, literal.53, id=54, pos=[(0,165,9)])
  array.63: bits[8][8] = array(literal.55, literal.56, literal.57, literal.58, literal.59, literal.60, literal.61, literal.62, id=63, pos=[(0,166,9)])
  array.72: bits[8][8] = array(literal.64, literal.65, literal.66, literal.67, literal.68, literal.69, literal.70, literal.71, id=72, pos=[(0,167,9)])
  ret array.73: bits[8][8][8] = array(array.9, array.18, array.27, array.36, array.45, array.54, array.63, array.72, id=73, pos=[(0,160,1)])
}

fn ____DCT_2D__dct_1d_u8_counted_for_0_body(i: bits[32] id=166, acc: bits[16][8] id=169, x: bits[8][8] id=170) -> bits[16][8] {
  literal.167: bits[32] = literal(value=0, id=167)
  add.168: bits[32] = add(i, literal.167, id=168)
  array_index.171: bits[8] = array_index(x, indices=[add.168], id=171, pos=[(0,124,30)])
  zero_ext.172: bits[16] = zero_ext(array_index.171, new_bit_count=16, id=172)
  literal.173: bits[16] = literal(value=128, id=173, pos=[(0,124,44)])
  sub.174: bits[16] = sub(zero_ext.172, literal.173, id=174, pos=[(0,124,30)])
  literal.175: bits[4] = literal(value=8, id=175, pos=[(0,124,56)])
  shifted: bits[16] = shll(sub.174, literal.175, id=176, pos=[(0,124,30)])
  ret array_update.177: bits[16][8] = array_update(acc, shifted, indices=[add.168], id=177, pos=[(0,125,14)])
}

fn __DCT_2D__fixed_mul(a: bits[16] id=74, b: bits[16] id=75) -> bits[16] {
  sign_ext.76: bits[32] = sign_ext(a, new_bit_count=32, id=76)
  sign_ext.77: bits[32] = sign_ext(b, new_bit_count=32, id=77)
  literal.79: bits[32] = literal(value=1, id=79, pos=[(0,81,31)])
  literal.80: bits[3] = literal(value=7, id=80, pos=[(0,81,40)])
  prod: bits[32] = smul(sign_ext.76, sign_ext.77, id=78, pos=[(0,80,21)])
  shll.81: bits[32] = shll(literal.79, literal.80, id=81, pos=[(0,81,31)])
  add.82: bits[32] = add(prod, shll.81, id=82, pos=[(0,81,23)])
  literal.83: bits[4] = literal(value=8, id=83, pos=[(0,81,47)])
  result: bits[32] = shra(add.82, literal.83, id=84, pos=[(0,81,23)])
  literal.88: bits[32] = literal(value=4294934528, id=88, pos=[(0,84,23)])
  literal.85: bits[32] = literal(value=32767, id=85, pos=[(0,82,16)])
  slt.89: bits[1] = slt(result, literal.88, id=89, pos=[(0,84,14)])
  bit_slice.91: bits[16] = bit_slice(result, start=0, width=16, id=91)
  literal.90: bits[16] = literal(value=32768, id=90, pos=[(0,85,8)])
  sgt.86: bits[1] = sgt(result, literal.85, id=86, pos=[(0,82,7)])
  sel.92: bits[16] = sel(slt.89, cases=[bit_slice.91, literal.90], id=92, pos=[(0,84,11)])
  literal.87: bits[16] = literal(value=32767, id=87, pos=[(0,83,8)])
  ret sel.93: bits[16] = sel(sgt.86, cases=[sel.92, literal.87], id=93, pos=[(0,82,4)])
}

fn ______DCT_2D__dct_1d_counted_for_0_body_counted_for_0_body(n: bits[32] id=118, acc: bits[32] id=121, DCT_LUT: bits[16][8][8] id=122, k: bits[32] id=123, x: bits[16][8] id=124) -> bits[32] {
  literal.119: bits[32] = literal(value=0, id=119)
  add.120: bits[32] = add(n, literal.119, id=120)
  array_index.126: bits[16][8] = array_index(DCT_LUT, indices=[k], id=126, pos=[(0,96,32)])
  array_index.125: bits[16] = array_index(x, indices=[add.120], id=125, pos=[(0,96,20)])
  array_index.127: bits[16] = array_index(array_index.126, indices=[add.120], id=127, pos=[(0,96,35)])
  invoke.128: bits[16] = invoke(array_index.125, array_index.127, to_apply=__DCT_2D__fixed_mul, id=128, pos=[(0,96,18)])
  sign_ext.129: bits[32] = sign_ext(invoke.128, new_bit_count=32, id=129)
  ret add.130: bits[32] = add(acc, sign_ext.129, id=130, pos=[(0,96,2)])
}

fn ____DCT_2D__dct_1d_counted_for_0_body(k: bits[32] id=108, result: bits[16][8] id=111, DCT_LUT: bits[16][8][8] id=112, FIXED_SQRT_1_OVER_N: bits[16] id=113, FIXED_SQRT_2_OVER_N: bits[16] id=114, N: bits[32] id=115, x: bits[16][8] id=116) -> bits[16][8] {
  literal.109: bits[32] = literal(value=0, id=109)
  add.110: bits[32] = add(k, literal.109, id=110)
  literal.132: bits[32] = literal(value=0, id=132, pos=[(0,99,28)])
  literal.117: bits[32] = literal(value=0, id=117, pos=[(0,97,5)])
  eq.133: bits[1] = eq(add.110, literal.132, id=133, pos=[(0,99,23)])
  sign_ext.135: bits[32] = sign_ext(FIXED_SQRT_2_OVER_N, new_bit_count=32, id=135)
  sign_ext.134: bits[32] = sign_ext(FIXED_SQRT_1_OVER_N, new_bit_count=32, id=134)
  sum: bits[32] = counted_for(literal.117, trip_count=8, stride=1, body=______DCT_2D__dct_1d_counted_for_0_body_counted_for_0_body, invariant_args=[DCT_LUT, add.110, x], id=131)
  alpha: bits[32] = sel(eq.133, cases=[sign_ext.135, sign_ext.134], id=136, pos=[(0,99,20)])
  literal.138: bits[32] = literal(value=1, id=138, pos=[(0,104,41)])
  literal.139: bits[3] = literal(value=7, id=139, pos=[(0,104,50)])
  smul.137: bits[32] = smul(sum, alpha, id=137, pos=[(0,104,26)])
  shll.140: bits[32] = shll(literal.138, literal.139, id=140, pos=[(0,104,41)])
  add.141: bits[32] = add(smul.137, shll.140, id=141, pos=[(0,104,26)])
  literal.142: bits[4] = literal(value=8, id=142, pos=[(0,104,57)])
  sum_scaled: bits[32] = shra(add.141, literal.142, id=143, pos=[(0,104,26)])
  literal.147: bits[32] = literal(value=32767, id=147, pos=[(0,108,26)])
  literal.144: bits[32] = literal(value=4294934528, id=144, pos=[(0,106,38)])
  sgt.148: bits[1] = sgt(sum_scaled, literal.147, id=148, pos=[(0,108,13)])
  bit_slice.150: bits[16] = bit_slice(sum_scaled, start=0, width=16, id=150)
  literal.149: bits[16] = literal(value=32767, id=149, pos=[(0,109,2)])
  slt.145: bits[1] = slt(sum_scaled, literal.144, id=145, pos=[(0,106,25)])
  sel.151: bits[16] = sel(sgt.148, cases=[bit_slice.150, literal.149], id=151, pos=[(0,108,10)])
  literal.146: bits[16] = literal(value=32768, id=146, pos=[(0,107,2)])
  clipped: bits[16] = sel(slt.145, cases=[sel.151, literal.146], id=152, pos=[(0,106,22)])
  ret array_update.153: bits[16][8] = array_update(result, clipped, indices=[add.110], id=153, pos=[(0,113,9)])
}

fn __DCT_2D__dct_1d(x: bits[16][8] id=94) -> bits[16][8] {
  literal.99: bits[16] = literal(value=0, id=99, pos=[(0,114,12)])
  literal.100: bits[16] = literal(value=0, id=100, pos=[(0,114,19)])
  literal.101: bits[16] = literal(value=0, id=101, pos=[(0,114,26)])
  literal.102: bits[16] = literal(value=0, id=102, pos=[(0,114,33)])
  literal.103: bits[16] = literal(value=0, id=103, pos=[(0,114,40)])
  literal.104: bits[16] = literal(value=0, id=104, pos=[(0,114,47)])
  literal.105: bits[16] = literal(value=0, id=105, pos=[(0,114,54)])
  literal.106: bits[16] = literal(value=0, id=106, pos=[(0,114,61)])
  array.107: bits[16][8] = array(literal.99, literal.100, literal.101, literal.102, literal.103, literal.104, literal.105, literal.106, id=107, pos=[(0,114,10)])
  DCT_LUT: bits[16][8][8] = literal(value=[[256, 256, 256, 256, 256, 256, 256, 256], [251, 213, 142, 50, 65486, 65394, 65323, 65285], [236, 98, 65438, 65300, 65300, 65438, 98, 236], [213, 65486, 65285, 65394, 142, 251, 50, 65323], [181, 65355, 65355, 181, 181, 65355, 65355, 181], [142, 65285, 65486, 213, 213, 65486, 65285, 142], [98, 65300, 98, 236, 236, 98, 65300, 98], [50, 65394, 213, 65285, 65285, 213, 65394, 50]], id=95, pos=[(0,65,31)])
  FIXED_SQRT_1_OVER_N: bits[16] = literal(value=91, id=96, pos=[(0,49,37)])
  FIXED_SQRT_2_OVER_N: bits[16] = literal(value=128, id=97, pos=[(0,50,37)])
  N: bits[32] = literal(value=8, id=98, pos=[(0,44,14)])
  ret counted_for.154: bits[16][8] = counted_for(array.107, trip_count=8, stride=1, body=____DCT_2D__dct_1d_counted_for_0_body, invariant_args=[DCT_LUT, FIXED_SQRT_1_OVER_N, FIXED_SQRT_2_OVER_N, N, x], id=154)
}

fn ____DCT_2D__dct_1d_u8_counted_for_1_body(i: bits[32] id=189, acc: bits[32][8] id=192, y_q88: bits[16][8] id=193) -> bits[32][8] {
  literal.190: bits[32] = literal(value=0, id=190)
  add.191: bits[32] = add(i, literal.190, id=191)
  array_index.194: bits[16] = array_index(y_q88, indices=[add.191], id=194, pos=[(0,131,28)])
  literal.196: bits[32] = literal(value=1, id=196, pos=[(0,132,35)])
  literal.197: bits[3] = literal(value=7, id=197, pos=[(0,132,44)])
  val: bits[32] = sign_ext(array_index.194, new_bit_count=32, id=195)
  shll.198: bits[32] = shll(literal.196, literal.197, id=198, pos=[(0,132,35)])
  add.199: bits[32] = add(val, shll.198, id=199, pos=[(0,132,28)])
  literal.200: bits[4] = literal(value=8, id=200, pos=[(0,132,51)])
  rounded: bits[32] = shra(add.199, literal.200, id=201, pos=[(0,132,28)])
  ret array_update.202: bits[32][8] = array_update(acc, rounded, indices=[add.191], id=202, pos=[(0,133,14)])
}

fn ____DCT_2D__dct_1d_u8_counted_for_2_body(i: bits[32] id=213, acc: bits[8][8] id=216, y_int32: bits[32][8] id=217) -> bits[8][8] {
  literal.214: bits[32] = literal(value=0, id=214)
  add.215: bits[32] = add(i, literal.214, id=215)
  array_index.218: bits[32] = array_index(y_int32, indices=[add.215], id=218, pos=[(0,137,36)])
  literal.219: bits[32] = literal(value=128, id=219, pos=[(0,137,42)])
  adjusted: bits[32] = add(array_index.218, literal.219, id=220, pos=[(0,137,36)])
  literal.224: bits[32] = literal(value=255, id=224, pos=[(0,140,29)])
  literal.221: bits[32] = literal(value=0, id=221, pos=[(0,138,40)])
  sgt.225: bits[1] = sgt(adjusted, literal.224, id=225, pos=[(0,140,18)])
  bit_slice.227: bits[8] = bit_slice(adjusted, start=0, width=8, id=227)
  literal.226: bits[8] = literal(value=255, id=226, pos=[(0,141,12)])
  slt.222: bits[1] = slt(adjusted, literal.221, id=222, pos=[(0,138,29)])
  sel.228: bits[8] = sel(sgt.225, cases=[bit_slice.227, literal.226], id=228, pos=[(0,140,15)])
  literal.223: bits[8] = literal(value=0, id=223, pos=[(0,139,12)])
  clipped: bits[8] = sel(slt.222, cases=[sel.228, literal.223], id=229, pos=[(0,138,26)])
  ret array_update.230: bits[8][8] = array_update(acc, clipped, indices=[add.215], id=230, pos=[(0,145,14)])
}

fn __DCT_2D__dct_1d_u8(x: bits[8][8] id=155) -> bits[8][8] {
  literal.157: bits[16] = literal(value=0, id=157, pos=[(0,126,14)])
  literal.158: bits[16] = literal(value=0, id=158, pos=[(0,126,21)])
  literal.159: bits[16] = literal(value=0, id=159, pos=[(0,126,28)])
  literal.160: bits[16] = literal(value=0, id=160, pos=[(0,126,35)])
  literal.161: bits[16] = literal(value=0, id=161, pos=[(0,126,42)])
  literal.162: bits[16] = literal(value=0, id=162, pos=[(0,126,49)])
  literal.163: bits[16] = literal(value=0, id=163, pos=[(0,126,56)])
  literal.164: bits[16] = literal(value=0, id=164, pos=[(0,126,63)])
  array.165: bits[16][8] = array(literal.157, literal.158, literal.159, literal.160, literal.161, literal.162, literal.163, literal.164, id=165, pos=[(0,126,13)])
  literal.180: bits[32] = literal(value=0, id=180, pos=[(0,134,14)])
  literal.181: bits[32] = literal(value=0, id=181, pos=[(0,134,21)])
  literal.182: bits[32] = literal(value=0, id=182, pos=[(0,134,28)])
  literal.183: bits[32] = literal(value=0, id=183, pos=[(0,134,35)])
  literal.184: bits[32] = literal(value=0, id=184, pos=[(0,134,42)])
  literal.185: bits[32] = literal(value=0, id=185, pos=[(0,134,49)])
  literal.186: bits[32] = literal(value=0, id=186, pos=[(0,134,56)])
  literal.187: bits[32] = literal(value=0, id=187, pos=[(0,134,63)])
  x_q88: bits[16][8] = counted_for(array.165, trip_count=8, stride=1, body=____DCT_2D__dct_1d_u8_counted_for_0_body, invariant_args=[x], id=178)
  literal.204: bits[8] = literal(value=0, id=204, pos=[(0,146,14)])
  literal.205: bits[8] = literal(value=0, id=205, pos=[(0,146,20)])
  literal.206: bits[8] = literal(value=0, id=206, pos=[(0,146,26)])
  literal.207: bits[8] = literal(value=0, id=207, pos=[(0,146,32)])
  literal.208: bits[8] = literal(value=0, id=208, pos=[(0,146,38)])
  literal.209: bits[8] = literal(value=0, id=209, pos=[(0,146,44)])
  literal.210: bits[8] = literal(value=0, id=210, pos=[(0,146,50)])
  literal.211: bits[8] = literal(value=0, id=211, pos=[(0,146,56)])
  array.188: bits[32][8] = array(literal.180, literal.181, literal.182, literal.183, literal.184, literal.185, literal.186, literal.187, id=188, pos=[(0,134,13)])
  y_q88: bits[16][8] = invoke(x_q88, to_apply=__DCT_2D__dct_1d, id=179, pos=[(0,128,30)])
  array.212: bits[8][8] = array(literal.204, literal.205, literal.206, literal.207, literal.208, literal.209, literal.210, literal.211, id=212, pos=[(0,146,12)])
  y_int32: bits[32][8] = counted_for(array.188, trip_count=8, stride=1, body=____DCT_2D__dct_1d_u8_counted_for_1_body, invariant_args=[y_q88], id=203)
  N: bits[32] = literal(value=8, id=156, pos=[(0,44,14)])
  ret result: bits[8][8] = counted_for(array.212, trip_count=8, stride=1, body=____DCT_2D__dct_1d_u8_counted_for_2_body, invariant_args=[y_int32], id=231)
}

fn ____DCT_2D__dct_2d_u8_counted_for_0_body(i: bits[32] id=244, acc: bits[8][8][8] id=247, x: bits[8][8][8] id=248) -> bits[8][8][8] {
  literal.245: bits[32] = literal(value=0, id=245)
  add.246: bits[32] = add(i, literal.245, id=246)
  array_index.249: bits[8][8] = array_index(x, indices=[add.246], id=249, pos=[(0,176,38)])
  invoke.250: bits[8][8] = invoke(array_index.249, to_apply=__DCT_2D__dct_1d_u8, id=250, pos=[(0,176,36)])
  ret array_update.251: bits[8][8][8] = array_update(acc, invoke.250, indices=[add.246], id=251, pos=[(0,176,18)])
}

fn __DCT_2D__zeros_u8_1d() -> bits[8][8] {
  literal.232: bits[8] = literal(value=0, id=232, pos=[(0,155,6)])
  literal.233: bits[8] = literal(value=0, id=233, pos=[(0,155,12)])
  literal.234: bits[8] = literal(value=0, id=234, pos=[(0,155,18)])
  literal.235: bits[8] = literal(value=0, id=235, pos=[(0,155,24)])
  literal.236: bits[8] = literal(value=0, id=236, pos=[(0,155,30)])
  literal.237: bits[8] = literal(value=0, id=237, pos=[(0,155,36)])
  literal.238: bits[8] = literal(value=0, id=238, pos=[(0,155,42)])
  literal.239: bits[8] = literal(value=0, id=239, pos=[(0,155,48)])
  ret array.240: bits[8][8] = array(literal.232, literal.233, literal.234, literal.235, literal.236, literal.237, literal.238, literal.239, id=240, pos=[(0,155,4)])
}

fn ______DCT_2D__dct_2d_u8_counted_for_1_body_counted_for_0_body(i: bits[32] id=260, col_acc: bits[8][8] id=263, j: bits[32] id=264, row_transformed: bits[8][8][8] id=265) -> bits[8][8] {
  literal.261: bits[32] = literal(value=0, id=261)
  add.262: bits[32] = add(i, literal.261, id=262)
  array_index.266: bits[8][8] = array_index(row_transformed, indices=[add.262], id=266, pos=[(0,187,54)])
  array_index.267: bits[8] = array_index(array_index.266, indices=[j], id=267, pos=[(0,187,57)])
  ret array_update.268: bits[8][8] = array_update(col_acc, array_index.267, indices=[add.262], id=268, pos=[(0,187,26)])
}

fn ______DCT_2D__dct_2d_u8_counted_for_1_body_counted_for_1_body(i: bits[32] id=271, updated_mat: bits[8][8][8] id=274, col_dct: bits[8][8] id=275, j: bits[32] id=276) -> bits[8][8][8] {
  literal.272: bits[32] = literal(value=0, id=272)
  add.273: bits[32] = add(i, literal.272, id=273)
  array_index.277: bits[8][8] = array_index(updated_mat, indices=[add.273], id=277, pos=[(0,195,52)])
  array_index.278: bits[8] = array_index(col_dct, indices=[add.273], id=278, pos=[(0,195,67)])
  updated_row: bits[8][8] = array_update(array_index.277, array_index.278, indices=[j], id=279, pos=[(0,195,40)])
  ret array_update.280: bits[8][8][8] = array_update(updated_mat, updated_row, indices=[add.273], id=280, pos=[(0,196,22)])
}

fn ____DCT_2D__dct_2d_u8_counted_for_1_body(j: bits[32] id=253, acc: bits[8][8][8] id=256, N: bits[32] id=257, row_transformed: bits[8][8][8] id=258) -> bits[8][8][8] {
  literal.254: bits[32] = literal(value=0, id=254)
  invoke.259: bits[8][8] = invoke(to_apply=__DCT_2D__zeros_u8_1d, id=259, pos=[(0,188,29)])
  add.255: bits[32] = add(j, literal.254, id=255)
  col: bits[8][8] = counted_for(invoke.259, trip_count=8, stride=1, body=______DCT_2D__dct_2d_u8_counted_for_1_body_counted_for_0_body, invariant_args=[add.255, row_transformed], id=269)
  col_dct: bits[8][8] = invoke(col, to_apply=__DCT_2D__dct_1d_u8, id=270, pos=[(0,191,42)])
  ret counted_for.281: bits[8][8][8] = counted_for(acc, trip_count=8, stride=1, body=______DCT_2D__dct_2d_u8_counted_for_1_body_counted_for_1_body, invariant_args=[col_dct, add.255], id=281)
}

top fn __DCT_2D__dct_2d_u8(x: bits[8][8][8] id=241) -> bits[8][8][8] {
  invoke.243: bits[8][8][8] = invoke(to_apply=__DCT_2D__zeros_2d, id=243, pos=[(0,177,18)])
  N: bits[32] = literal(value=8, id=242, pos=[(0,44,14)])
  row_transformed: bits[8][8][8] = counted_for(invoke.243, trip_count=8, stride=1, body=____DCT_2D__dct_2d_u8_counted_for_0_body, invariant_args=[x], id=252)
  ret col_transformed: bits[8][8][8] = counted_for(row_transformed, trip_count=8, stride=1, body=____DCT_2D__dct_2d_u8_counted_for_1_body, invariant_args=[N, row_transformed], id=282)
}
