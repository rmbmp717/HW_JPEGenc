package rgb_ycbcr

file_number 0 "./src/rgb_ycbcr.x"

top fn __rgb_ycbcr__rgb_to_ycbcr(r: bits[8] id=1, g: bits[8] id=2, b: bits[8] id=3) -> (bits[8], bits[8], bits[8]) {
  literal.4: bits[8] = literal(value=0, id=4, pos=[(0,11,19)])
  literal.7: bits[8] = literal(value=0, id=7, pos=[(0,12,19)])
  concat.5: bits[16] = concat(literal.4, r, id=5, pos=[(0,11,19)])
  concat.8: bits[16] = concat(literal.7, g, id=8, pos=[(0,12,19)])
  literal.10: bits[8] = literal(value=0, id=10, pos=[(0,13,19)])
  literal.24: bits[16] = literal(value=65493, id=24, pos=[(0,23,17)])
  r_16bit: bits[16] = zero_ext(concat.5, new_bit_count=16, id=6)
  literal.26: bits[16] = literal(value=65451, id=26, pos=[(0,23,37)])
  g_16bit: bits[16] = zero_ext(concat.8, new_bit_count=16, id=9)
  concat.11: bits[16] = concat(literal.10, b, id=11, pos=[(0,13,19)])
  literal.37: bits[16] = literal(value=128, id=37, pos=[(0,31,17)])
  literal.39: bits[16] = literal(value=65429, id=39, pos=[(0,31,37)])
  literal.13: bits[16] = literal(value=77, id=13, pos=[(0,17,16)])
  literal.15: bits[16] = literal(value=150, id=15, pos=[(0,17,35)])
  smul.25: bits[16] = smul(literal.24, r_16bit, id=25, pos=[(0,23,17)])
  smul.27: bits[16] = smul(literal.26, g_16bit, id=27, pos=[(0,23,37)])
  literal.29: bits[16] = literal(value=128, id=29, pos=[(0,23,57)])
  b_16bit: bits[16] = zero_ext(concat.11, new_bit_count=16, id=12)
  smul.38: bits[16] = smul(literal.37, r_16bit, id=38, pos=[(0,31,17)])
  smul.40: bits[16] = smul(literal.39, g_16bit, id=40, pos=[(0,31,37)])
  literal.42: bits[16] = literal(value=65515, id=42, pos=[(0,31,58)])
  smul.14: bits[16] = smul(literal.13, r_16bit, id=14, pos=[(0,17,16)])
  smul.16: bits[16] = smul(literal.15, g_16bit, id=16, pos=[(0,17,35)])
  literal.18: bits[16] = literal(value=29, id=18, pos=[(0,17,55)])
  add.28: bits[16] = add(smul.25, smul.27, id=28, pos=[(0,23,17)])
  smul.30: bits[16] = smul(literal.29, b_16bit, id=30, pos=[(0,23,57)])
  add.41: bits[16] = add(smul.38, smul.40, id=41, pos=[(0,31,17)])
  smul.43: bits[16] = smul(literal.42, b_16bit, id=43, pos=[(0,31,58)])
  add.17: bits[16] = add(smul.14, smul.16, id=17, pos=[(0,17,16)])
  smul.19: bits[16] = smul(literal.18, b_16bit, id=19, pos=[(0,17,55)])
  add.31: bits[16] = add(add.28, smul.30, id=31, pos=[(0,23,17)])
  literal.32: bits[4] = literal(value=8, id=32, pos=[(0,23,79)])
  add.44: bits[16] = add(add.41, smul.43, id=44, pos=[(0,31,17)])
  literal.45: bits[4] = literal(value=8, id=45, pos=[(0,31,80)])
  add.20: bits[16] = add(add.17, smul.19, id=20, pos=[(0,17,16)])
  literal.21: bits[4] = literal(value=8, id=21, pos=[(0,17,76)])
  cb_16: bits[16] = shra(add.31, literal.32, id=33, pos=[(0,23,17)])
  cr_16: bits[16] = shra(add.44, literal.45, id=46, pos=[(0,31,17)])
  y_16: bits[16] = shra(add.20, literal.21, id=22, pos=[(0,17,16)])
  cb: bits[8] = bit_slice(cb_16, start=0, width=8, id=34)
  literal.35: bits[8] = literal(value=128, id=35, pos=[(0,26,18)])
  cr: bits[8] = bit_slice(cr_16, start=0, width=8, id=47)
  literal.48: bits[8] = literal(value=128, id=48, pos=[(0,34,18)])
  y: bits[8] = bit_slice(y_16, start=0, width=8, id=23)
  cb__1: bits[8] = add(cb, literal.35, id=36, pos=[(0,26,13)])
  cr__1: bits[8] = add(cr, literal.48, id=49, pos=[(0,34,13)])
  identity.50: bits[8] = identity(y, id=50, pos=[(0,37,10)])
  identity.51: bits[8] = identity(cb__1, id=51, pos=[(0,38,10)])
  identity.52: bits[8] = identity(cr__1, id=52, pos=[(0,39,10)])
  ret tuple.53: (bits[8], bits[8], bits[8]) = tuple(y, cb__1, cr__1, id=53, pos=[(0,42,4)])
}
