package DCT_1D

file_number 0 "./src/DCT_1D.x"

fn ____DCT_1D__dct_1d_u8_counted_for_0_body(i: bits[32] id=85, arr: bits[16][8] id=88, x: bits[8][8] id=89) -> bits[16][8] {
  literal.86: bits[32] = literal(value=0, id=86)
  add.87: bits[32] = add(i, literal.86, id=87)
  array_index.90: bits[8] = array_index(x, indices=[add.87], id=90, pos=[(0,70,25)])
  zero_ext.91: bits[16] = zero_ext(array_index.90, new_bit_count=16, id=91)
  literal.92: bits[4] = literal(value=8, id=92, pos=[(0,70,40)])
  shifted: bits[16] = shll(zero_ext.91, literal.92, id=93, pos=[(0,70,25)])
  ret array_update.94: bits[16][8] = array_update(arr, shifted, indices=[add.87], id=94, pos=[(0,71,10)])
}

fn __DCT_1D__fixed_mul(a: bits[16] id=1, b: bits[16] id=2) -> bits[16] {
  sign_ext.3: bits[32] = sign_ext(a, new_bit_count=32, id=3)
  sign_ext.4: bits[32] = sign_ext(b, new_bit_count=32, id=4)
  literal.6: bits[32] = literal(value=1, id=6, pos=[(0,32,29)])
  literal.7: bits[3] = literal(value=7, id=7, pos=[(0,32,38)])
  prod: bits[32] = smul(sign_ext.3, sign_ext.4, id=5, pos=[(0,31,19)])
  shll.8: bits[32] = shll(literal.6, literal.7, id=8, pos=[(0,32,29)])
  add.9: bits[32] = add(prod, shll.8, id=9, pos=[(0,32,21)])
  literal.10: bits[4] = literal(value=8, id=10, pos=[(0,32,45)])
  result: bits[32] = shra(add.9, literal.10, id=11, pos=[(0,32,21)])
  ret bit_slice.12: bits[16] = bit_slice(result, start=0, width=16, id=12)
}

fn ______DCT_1D__dct_1d_counted_for_0_body_counted_for_0_body(n: bits[32] id=37, acc: bits[32] id=40, DCT_LUT: bits[16][8][8] id=41, k: bits[32] id=42, x: bits[16][8] id=43) -> bits[32] {
  literal.38: bits[32] = literal(value=0, id=38)
  add.39: bits[32] = add(n, literal.38, id=39)
  array_index.45: bits[16][8] = array_index(DCT_LUT, indices=[k], id=45, pos=[(0,47,36)])
  array_index.44: bits[16] = array_index(x, indices=[add.39], id=44, pos=[(0,47,24)])
  array_index.46: bits[16] = array_index(array_index.45, indices=[add.39], id=46, pos=[(0,47,39)])
  invoke.47: bits[16] = invoke(array_index.44, array_index.46, to_apply=__DCT_1D__fixed_mul, id=47, pos=[(0,47,22)])
  sign_ext.48: bits[32] = sign_ext(invoke.47, new_bit_count=32, id=48)
  ret add.49: bits[32] = add(acc, sign_ext.48, id=49, pos=[(0,47,6)])
}

fn ____DCT_1D__dct_1d_counted_for_0_body(k: bits[32] id=27, result: bits[16][8] id=30, DCT_LUT: bits[16][8][8] id=31, FIXED_SQRT_1_OVER_N: bits[16] id=32, FIXED_SQRT_2_OVER_N: bits[16] id=33, N: bits[32] id=34, x: bits[16][8] id=35) -> bits[16][8] {
  literal.28: bits[32] = literal(value=0, id=28)
  add.29: bits[32] = add(k, literal.28, id=29)
  literal.51: bits[32] = literal(value=0, id=51, pos=[(0,50,29)])
  literal.36: bits[32] = literal(value=0, id=36, pos=[(0,48,6)])
  eq.52: bits[1] = eq(add.29, literal.51, id=52, pos=[(0,50,24)])
  sign_ext.54: bits[32] = sign_ext(FIXED_SQRT_2_OVER_N, new_bit_count=32, id=54)
  sign_ext.53: bits[32] = sign_ext(FIXED_SQRT_1_OVER_N, new_bit_count=32, id=53)
  sum: bits[32] = counted_for(literal.36, trip_count=8, stride=1, body=______DCT_1D__dct_1d_counted_for_0_body_counted_for_0_body, invariant_args=[DCT_LUT, add.29, x], id=50)
  alpha: bits[32] = sel(eq.52, cases=[sign_ext.54, sign_ext.53], id=55, pos=[(0,50,21)])
  literal.57: bits[32] = literal(value=1, id=57, pos=[(0,55,42)])
  literal.58: bits[3] = literal(value=7, id=58, pos=[(0,55,51)])
  smul.56: bits[32] = smul(sum, alpha, id=56, pos=[(0,55,27)])
  shll.59: bits[32] = shll(literal.57, literal.58, id=59, pos=[(0,55,42)])
  add.60: bits[32] = add(smul.56, shll.59, id=60, pos=[(0,55,27)])
  literal.61: bits[4] = literal(value=8, id=61, pos=[(0,55,58)])
  sum_scaled: bits[32] = shra(add.60, literal.61, id=62, pos=[(0,55,27)])
  literal.66: bits[32] = literal(value=32767, id=66, pos=[(0,59,27)])
  literal.63: bits[32] = literal(value=4294934528, id=63, pos=[(0,57,39)])
  sgt.67: bits[1] = sgt(sum_scaled, literal.66, id=67, pos=[(0,59,14)])
  bit_slice.69: bits[16] = bit_slice(sum_scaled, start=0, width=16, id=69)
  literal.68: bits[16] = literal(value=32767, id=68, pos=[(0,60,6)])
  slt.64: bits[1] = slt(sum_scaled, literal.63, id=64, pos=[(0,57,26)])
  sel.70: bits[16] = sel(sgt.67, cases=[bit_slice.69, literal.68], id=70, pos=[(0,59,11)])
  literal.65: bits[16] = literal(value=32768, id=65, pos=[(0,58,6)])
  clipped: bits[16] = sel(slt.64, cases=[sel.70, literal.65], id=71, pos=[(0,57,23)])
  ret array_update.72: bits[16][8] = array_update(result, clipped, indices=[add.29], id=72, pos=[(0,64,10)])
}

fn __DCT_1D__dct_1d(x: bits[16][8] id=13) -> bits[16][8] {
  literal.18: bits[16] = literal(value=0, id=18, pos=[(0,65,13)])
  literal.19: bits[16] = literal(value=0, id=19, pos=[(0,65,20)])
  literal.20: bits[16] = literal(value=0, id=20, pos=[(0,65,27)])
  literal.21: bits[16] = literal(value=0, id=21, pos=[(0,65,34)])
  literal.22: bits[16] = literal(value=0, id=22, pos=[(0,65,41)])
  literal.23: bits[16] = literal(value=0, id=23, pos=[(0,65,48)])
  literal.24: bits[16] = literal(value=0, id=24, pos=[(0,65,55)])
  literal.25: bits[16] = literal(value=0, id=25, pos=[(0,65,62)])
  array.26: bits[16][8] = array(literal.18, literal.19, literal.20, literal.21, literal.22, literal.23, literal.24, literal.25, id=26, pos=[(0,65,11)])
  DCT_LUT: bits[16][8][8] = literal(value=[[256, 256, 256, 256, 256, 256, 256, 256], [251, 213, 142, 50, 65486, 65394, 65323, 65285], [236, 98, 65438, 65300, 65300, 65438, 98, 236], [213, 65486, 65285, 65394, 142, 251, 50, 65323], [181, 65355, 65355, 181, 181, 65355, 65355, 181], [142, 65285, 65486, 213, 213, 65486, 65285, 142], [98, 65300, 98, 236, 236, 98, 65300, 98], [50, 65394, 213, 65285, 65285, 213, 65394, 50]], id=14, pos=[(0,16,31)])
  FIXED_SQRT_1_OVER_N: bits[16] = literal(value=91, id=15, pos=[(0,11,37)])
  FIXED_SQRT_2_OVER_N: bits[16] = literal(value=128, id=16, pos=[(0,12,37)])
  N: bits[32] = literal(value=8, id=17, pos=[(0,7,14)])
  ret counted_for.73: bits[16][8] = counted_for(array.26, trip_count=8, stride=1, body=____DCT_1D__dct_1d_counted_for_0_body, invariant_args=[DCT_LUT, FIXED_SQRT_1_OVER_N, FIXED_SQRT_2_OVER_N, N, x], id=73)
}

fn ____DCT_1D__dct_1d_u8_counted_for_1_body(i: bits[32] id=106, arr: bits[32][8] id=109, y_q88: bits[16][8] id=110) -> bits[32][8] {
  literal.107: bits[32] = literal(value=0, id=107)
  add.108: bits[32] = add(i, literal.107, id=108)
  array_index.111: bits[16] = array_index(y_q88, indices=[add.108], id=111, pos=[(0,77,24)])
  literal.113: bits[32] = literal(value=1, id=113, pos=[(0,78,31)])
  literal.114: bits[3] = literal(value=7, id=114, pos=[(0,78,40)])
  val: bits[32] = sign_ext(array_index.111, new_bit_count=32, id=112)
  shll.115: bits[32] = shll(literal.113, literal.114, id=115, pos=[(0,78,31)])
  add.116: bits[32] = add(val, shll.115, id=116, pos=[(0,78,24)])
  literal.117: bits[4] = literal(value=8, id=117, pos=[(0,78,47)])
  rounded: bits[32] = shra(add.116, literal.117, id=118, pos=[(0,78,24)])
  ret array_update.119: bits[32][8] = array_update(arr, rounded, indices=[add.108], id=119, pos=[(0,79,10)])
}

fn ____DCT_1D__dct_1d_u8_counted_for_2_body(i: bits[32] id=130, arr: bits[8][8] id=133, y_int32: bits[32][8] id=134) -> bits[8][8] {
  literal.131: bits[32] = literal(value=0, id=131)
  add.132: bits[32] = add(i, literal.131, id=132)
  array_index.139: bits[32] = array_index(y_int32, indices=[add.132], id=139, pos=[(0,85,21)])
  literal.140: bits[32] = literal(value=255, id=140, pos=[(0,85,27)])
  array_index.143: bits[32] = array_index(y_int32, indices=[add.132], id=143, pos=[(0,88,13)])
  array_index.135: bits[32] = array_index(y_int32, indices=[add.132], id=135, pos=[(0,83,32)])
  literal.136: bits[32] = literal(value=0, id=136, pos=[(0,83,38)])
  sgt.141: bits[1] = sgt(array_index.139, literal.140, id=141, pos=[(0,85,21)])
  bit_slice.144: bits[8] = bit_slice(array_index.143, start=0, width=8, id=144)
  literal.142: bits[8] = literal(value=255, id=142, pos=[(0,86,6)])
  slt.137: bits[1] = slt(array_index.135, literal.136, id=137, pos=[(0,83,32)])
  sel.145: bits[8] = sel(sgt.141, cases=[bit_slice.144, literal.142], id=145, pos=[(0,85,11)])
  literal.138: bits[8] = literal(value=0, id=138, pos=[(0,84,6)])
  clipped: bits[8] = sel(slt.137, cases=[sel.145, literal.138], id=146, pos=[(0,83,22)])
  ret array_update.147: bits[8][8] = array_update(arr, clipped, indices=[add.132], id=147, pos=[(0,90,10)])
}

top fn __DCT_1D__dct_1d_u8(x: bits[8][8] id=74) -> bits[8][8] {
  literal.76: bits[16] = literal(value=0, id=76, pos=[(0,72,13)])
  literal.77: bits[16] = literal(value=0, id=77, pos=[(0,72,20)])
  literal.78: bits[16] = literal(value=0, id=78, pos=[(0,72,27)])
  literal.79: bits[16] = literal(value=0, id=79, pos=[(0,72,34)])
  literal.80: bits[16] = literal(value=0, id=80, pos=[(0,72,41)])
  literal.81: bits[16] = literal(value=0, id=81, pos=[(0,72,48)])
  literal.82: bits[16] = literal(value=0, id=82, pos=[(0,72,55)])
  literal.83: bits[16] = literal(value=0, id=83, pos=[(0,72,62)])
  array.84: bits[16][8] = array(literal.76, literal.77, literal.78, literal.79, literal.80, literal.81, literal.82, literal.83, id=84, pos=[(0,72,11)])
  literal.97: bits[32] = literal(value=0, id=97, pos=[(0,80,13)])
  literal.98: bits[32] = literal(value=0, id=98, pos=[(0,80,20)])
  literal.99: bits[32] = literal(value=0, id=99, pos=[(0,80,27)])
  literal.100: bits[32] = literal(value=0, id=100, pos=[(0,80,34)])
  literal.101: bits[32] = literal(value=0, id=101, pos=[(0,80,41)])
  literal.102: bits[32] = literal(value=0, id=102, pos=[(0,80,48)])
  literal.103: bits[32] = literal(value=0, id=103, pos=[(0,80,55)])
  literal.104: bits[32] = literal(value=0, id=104, pos=[(0,80,62)])
  x_q88: bits[16][8] = counted_for(array.84, trip_count=8, stride=1, body=____DCT_1D__dct_1d_u8_counted_for_0_body, invariant_args=[x], id=95)
  literal.121: bits[8] = literal(value=0, id=121, pos=[(0,91,12)])
  literal.122: bits[8] = literal(value=0, id=122, pos=[(0,91,18)])
  literal.123: bits[8] = literal(value=0, id=123, pos=[(0,91,24)])
  literal.124: bits[8] = literal(value=0, id=124, pos=[(0,91,30)])
  literal.125: bits[8] = literal(value=0, id=125, pos=[(0,91,36)])
  literal.126: bits[8] = literal(value=0, id=126, pos=[(0,91,42)])
  literal.127: bits[8] = literal(value=0, id=127, pos=[(0,91,48)])
  literal.128: bits[8] = literal(value=0, id=128, pos=[(0,91,54)])
  array.105: bits[32][8] = array(literal.97, literal.98, literal.99, literal.100, literal.101, literal.102, literal.103, literal.104, id=105, pos=[(0,80,11)])
  y_q88: bits[16][8] = invoke(x_q88, to_apply=__DCT_1D__dct_1d, id=96, pos=[(0,74,28)])
  array.129: bits[8][8] = array(literal.121, literal.122, literal.123, literal.124, literal.125, literal.126, literal.127, literal.128, id=129, pos=[(0,91,10)])
  y_int32: bits[32][8] = counted_for(array.105, trip_count=8, stride=1, body=____DCT_1D__dct_1d_u8_counted_for_1_body, invariant_args=[y_q88], id=120)
  N: bits[32] = literal(value=8, id=75, pos=[(0,7,14)])
  ret result: bits[8][8] = counted_for(array.129, trip_count=8, stride=1, body=____DCT_1D__dct_1d_u8_counted_for_2_body, invariant_args=[y_int32], id=148)
}
