#from bitstream import BitStream
from bitstring import BitStream

import numpy
from numpy import *
from collections import OrderedDict

#hexToBytes('F0') = 1111 1111 0000 0000(bytes)
def hexToBytes(hexStr):
    num = len(hexStr)//2
    ret = numpy.zeros([num],dtype=int)
    for i in range(num):
        ret[i] = int(hexStr[2*i:2*i+2],16)

    ret = ret.tolist()
    ret = bytes(ret)
    return ret

#Image Compression: JPEG Multimedia Systems (Module 4 Lesson 1).pdf

#The DC Hoffman coding table for luminance recommended by JPEG
DCLuminanceSizeToCode = [
    [1,1,0],              #0 EOB
    [1,0,1],            #1
    [0,1,1],            #2
    [0,1,0],            #3
    [0,0,0],            #4
    [0,0,1],            #5
    [1,0,0],            #6
    [1,1,1,0],        #7
    [1,1,1,1,0],      #8
    [1,1,1,1,1,0],    #9
    [1,1,1,1,1,1,0],  #10 0A
    [1,1,1,1,1,1,1,0] #11 0B
]







#The DC Hoffman coding table for chrominance recommended by JPEG
DCChrominanceSizeToCode = [
    [0,1],                 #0 EOB
    [0,0],                 #1
    [1,0,0],               #2
    [1,0,1],               #3
    [1,1,0,0],             #4
    [1,1,0,1],             #5
    [1,1,1,0],             #6
    [1,1,1,1,0],           #7
    [1,1,1,1,1,0],     #8
    [1,1,1,1,1,1,0],   #9
    [1,1,1,1,1,1,1,0], #10 0A
    [1,1,1,1,1,1,1,1,0]#11 0B
]


ACLuminanceSizeToCode = {


'01':[0,0],


'02':[0,1],


'03':[1,0,0],


'11':[1,0,1,0],


'04':[1,0,1,1],


'00':[1,1,0,0],


'05':[1,1,0,1,0],


'21':[1,1,0,1,1],


'12':[1,1,1,0,0],


'31':[1,1,1,0,1,0],


'41':[1,1,1,0,1,1],


'51':[1,1,1,1,0,0,0],


'06':[1,1,1,1,0,0,1],


'13':[1,1,1,1,0,1,0],


'61':[1,1,1,1,0,1,1],


'22':[1,1,1,1,1,0,0,0],


'71':[1,1,1,1,1,0,0,1],


'81':[1,1,1,1,1,0,1,0,0],


'14':[1,1,1,1,1,0,1,0,1],


'32':[1,1,1,1,1,0,1,1,0],


'91':[1,1,1,1,1,0,1,1,1],


'A1':[1,1,1,1,1,1,0,0,0],


'07':[1,1,1,1,1,1,0,0,1],


'15':[1,1,1,1,1,1,0,1,0,0],


'B1':[1,1,1,1,1,1,0,1,0,1],


'42':[1,1,1,1,1,1,0,1,1,0],


'23':[1,1,1,1,1,1,0,1,1,1],


'C1':[1,1,1,1,1,1,1,0,0,0],


'52':[1,1,1,1,1,1,1,0,0,1],


'D1':[1,1,1,1,1,1,1,0,1,0],


'E1':[1,1,1,1,1,1,1,0,1,1,0],


'33':[1,1,1,1,1,1,1,0,1,1,1],


'16':[1,1,1,1,1,1,1,1,0,0,0],


'62':[1,1,1,1,1,1,1,1,0,0,1,0],


'F0':[1,1,1,1,1,1,1,1,0,0,1,1],


'24':[1,1,1,1,1,1,1,1,0,1,0,0],


'72':[1,1,1,1,1,1,1,1,0,1,0,1],


'82':[1,1,1,1,1,1,1,1,0,1,1,0,0],


'F1':[1,1,1,1,1,1,1,1,0,1,1,0,1],


'25':[1,1,1,1,1,1,1,1,0,1,1,1,0,0],


'43':[1,1,1,1,1,1,1,1,0,1,1,1,0,1],


'34':[1,1,1,1,1,1,1,1,0,1,1,1,1,0],


'53':[1,1,1,1,1,1,1,1,0,1,1,1,1,1],


'92':[1,1,1,1,1,1,1,1,1,0,0,0,0,0],


'A2':[1,1,1,1,1,1,1,1,1,0,0,0,0,1],


'B2':[1,1,1,1,1,1,1,1,1,0,0,0,1,0,0],


'63':[1,1,1,1,1,1,1,1,1,0,0,0,1,0,1],


'73':[1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0],


'C2':[1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,1],


'35':[1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0],


'44':[1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1],


'27':[1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0],


'93':[1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,1],


'A3':[1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,0],


'B3':[1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,1],


'36':[1,1,1,1,1,1,1,1,1,0,0,1,0,1,0,0],


'17':[1,1,1,1,1,1,1,1,1,0,0,1,0,1,0,1],


'54':[1,1,1,1,1,1,1,1,1,0,0,1,0,1,1,0],


'64':[1,1,1,1,1,1,1,1,1,0,0,1,0,1,1,1],


'74':[1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,0],


'C3':[1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1],


'D2':[1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,0],


'E2':[1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,1],


'08':[1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,0],


'26':[1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1],


'83':[1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0],


'09':[1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1],


'0A':[1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0],


'18':[1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,1],


'19':[1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,0],


'84':[1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,1],


'94':[1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0],


'45':[1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,1],


'46':[1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,0],


'A4':[1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,1],


'B4':[1,1,1,1,1,1,1,1,1,0,1,0,1,0,0,0],


'56':[1,1,1,1,1,1,1,1,1,0,1,0,1,0,0,1],


'D3':[1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0],


'55':[1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,1],


'28':[1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,0],


'1A':[1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,1],


'F2':[1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0],


'E3':[1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1],


'F3':[1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0],


'C4':[1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,1],


'D4':[1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,0],


'E4':[1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1],


'F4':[1,1,1,1,1,1,1,1,1,0,1,1,0,1,0,0],


'65':[1,1,1,1,1,1,1,1,1,0,1,1,0,1,0,1],


'75':[1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0],


'85':[1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1],


'95':[1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0],


'A5':[1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1],


'B5':[1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0],


'C5':[1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1],


'D5':[1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0],


'E5':[1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1],


'F5':[1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0],


'66':[1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1],


'76':[1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],


'86':[1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1],


'96':[1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,0],


'A6':[1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1],


'B6':[1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0],


'C6':[1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,1],


'D6':[1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0],


'E6':[1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1],


'F6':[1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0],


'37':[1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1],


'47':[1,1,1,1,1,1,1,1,1,1,0,0,1,0,1,0],


'57':[1,1,1,1,1,1,1,1,1,1,0,0,1,0,1,1],


'67':[1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0],


'77':[1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,1],


'87':[1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0],


'97':[1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1],


'A7':[1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0],


'B7':[1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1],


'C7':[1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0],


'D7':[1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1],


'E7':[1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,0],


'F7':[1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1],


'38':[1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,0],


'48':[1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1],


'58':[1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0],


'68':[1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1],


'78':[1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,0],


'88':[1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1],


'98':[1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0],


'A8':[1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1],


'B8':[1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0],


'C8':[1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1],


'D8':[1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0],


'E8':[1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1],


'F8':[1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0],


'29':[1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1],


'39':[1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0],


'49':[1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,1],


'59':[1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0],


'69':[1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1],


'79':[1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0],


'89':[1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1],


'99':[1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0],


'A9':[1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1],


'B9':[1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0],


'C9':[1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1],


'D9':[1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0],


'E9':[1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1],


'F9':[1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0],


'2A':[1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1],


'3A':[1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0],


'4A':[1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1],


'5A':[1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0],


'6A':[1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1],


'7A':[1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0],


'8A':[1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1],


'9A':[1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],


'AA':[1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1],


'BA':[1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0],


'CA':[1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1],


'DA':[1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],


'EA':[1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1],


'FA':[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0]
}


ACChrominanceToCode = {
'01':[0,0],


'00':[0,1],


'02':[1,0,0],


'11':[1,0,1],


'03':[1,1,0,0],


'04':[1,1,0,1,0],


'21':[1,1,0,1,1],


'12':[1,1,1,0,0,0],


'31':[1,1,1,0,0,1],


'41':[1,1,1,0,1,0],


'05':[1,1,1,0,1,1,0],


'51':[1,1,1,0,1,1,1],


'13':[1,1,1,1,0,0,0],


'61':[1,1,1,1,0,0,1],


'22':[1,1,1,1,0,1,0],


'06':[1,1,1,1,0,1,1,0],


'71':[1,1,1,1,0,1,1,1],


'81':[1,1,1,1,1,0,0,0],


'91':[1,1,1,1,1,0,0,1],


'32':[1,1,1,1,1,0,1,0],


'A1':[1,1,1,1,1,0,1,1,0],


'B1':[1,1,1,1,1,0,1,1,1],


'F0':[1,1,1,1,1,1,0,0,0],


'14':[1,1,1,1,1,1,0,0,1],


'C1':[1,1,1,1,1,1,0,1,0,0],


'D1':[1,1,1,1,1,1,0,1,0,1],


'E1':[1,1,1,1,1,1,0,1,1,0],


'23':[1,1,1,1,1,1,0,1,1,1],


'42':[1,1,1,1,1,1,1,0,0,0],


'15':[1,1,1,1,1,1,1,0,0,1,0],


'52':[1,1,1,1,1,1,1,0,0,1,1],


'62':[1,1,1,1,1,1,1,0,1,0,0],


'72':[1,1,1,1,1,1,1,0,1,0,1],


'F1':[1,1,1,1,1,1,1,0,1,1,0],


'33':[1,1,1,1,1,1,1,0,1,1,1],


'24':[1,1,1,1,1,1,1,1,0,0,0,0],


'34':[1,1,1,1,1,1,1,1,0,0,0,1],


'43':[1,1,1,1,1,1,1,1,0,0,1,0],


'82':[1,1,1,1,1,1,1,1,0,0,1,1],


'16':[1,1,1,1,1,1,1,1,0,1,0,0,0],


'92':[1,1,1,1,1,1,1,1,0,1,0,0,1],


'53':[1,1,1,1,1,1,1,1,0,1,0,1,0],


'25':[1,1,1,1,1,1,1,1,0,1,0,1,1],


'A2':[1,1,1,1,1,1,1,1,0,1,1,0,0],


'63':[1,1,1,1,1,1,1,1,0,1,1,0,1],


'B2':[1,1,1,1,1,1,1,1,0,1,1,1,0],


'C2':[1,1,1,1,1,1,1,1,0,1,1,1,1],


'07':[1,1,1,1,1,1,1,1,1,0,0,0,0,0],


'73':[1,1,1,1,1,1,1,1,1,0,0,0,0,1],


'D2':[1,1,1,1,1,1,1,1,1,0,0,0,1,0],


'35':[1,1,1,1,1,1,1,1,1,0,0,0,1,1,0],


'E2':[1,1,1,1,1,1,1,1,1,0,0,0,1,1,1],


'44':[1,1,1,1,1,1,1,1,1,0,0,1,0,0,0],


'83':[1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,0],


'17':[1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,1],


'54':[1,1,1,1,1,1,1,1,1,0,0,1,0,1,0,0],


'93':[1,1,1,1,1,1,1,1,1,0,0,1,0,1,0,1],


'08':[1,1,1,1,1,1,1,1,1,0,0,1,0,1,1,0],


'09':[1,1,1,1,1,1,1,1,1,0,0,1,0,1,1,1],


'0A':[1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,0],


'18':[1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1],


'19':[1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,0],


'26':[1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,1],


'36':[1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,0],


'45':[1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1],


'1A':[1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0],


'27':[1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1],


'64':[1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0],


'74':[1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,1],


'55':[1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,0],


'37':[1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,1],


'F2':[1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0],


'A3':[1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,1],


'B3':[1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,0],


'C3':[1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,1],


'28':[1,1,1,1,1,1,1,1,1,0,1,0,1,0,0,0],


'29':[1,1,1,1,1,1,1,1,1,0,1,0,1,0,0,1],


'D3':[1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0],


'E3':[1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,1],


'F3':[1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,0],


'84':[1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,1],


'94':[1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0],


'A4':[1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1],


'B4':[1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0],


'C4':[1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,1],


'D4':[1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,0],


'E4':[1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1],


'F4':[1,1,1,1,1,1,1,1,1,0,1,1,0,1,0,0],


'65':[1,1,1,1,1,1,1,1,1,0,1,1,0,1,0,1],


'75':[1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0],


'85':[1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1],


'95':[1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0],


'A5':[1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1],


'B5':[1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0],


'C5':[1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1],


'D5':[1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0],


'E5':[1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1],


'F5':[1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0],


'46':[1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1],


'56':[1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],


'66':[1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1],


'76':[1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,0],


'86':[1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1],


'96':[1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0],


'A6':[1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,1],


'B6':[1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0],


'C6':[1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1],


'D6':[1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0],


'E6':[1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1],


'F6':[1,1,1,1,1,1,1,1,1,1,0,0,1,0,1,0],


'47':[1,1,1,1,1,1,1,1,1,1,0,0,1,0,1,1],


'57':[1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0],


'67':[1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,1],


'77':[1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0],


'87':[1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1],


'97':[1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0],


'A7':[1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1],


'B7':[1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0],


'C7':[1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1],


'D7':[1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,0],


'E7':[1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1],


'F7':[1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,0],


'38':[1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1],


'48':[1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0],


'58':[1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1],


'68':[1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,0],


'78':[1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1],


'88':[1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0],


'98':[1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1],


'A8':[1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0],


'B8':[1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1],


'C8':[1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0],


'D8':[1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1],


'E8':[1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0],


'F8':[1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1],


'39':[1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0],


'49':[1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,1],


'59':[1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0],


'69':[1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1],


'79':[1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0],


'89':[1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1],


'99':[1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0],


'A9':[1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1],


'B9':[1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0],


'C9':[1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1],


'D9':[1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0],


'E9':[1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1],


'F9':[1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0],


'2A':[1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1],


'3A':[1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0],


'4A':[1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1],


'5A':[1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0],


'6A':[1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1],


'7A':[1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0],


'8A':[1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1],


'9A':[1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],


'AA':[1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1],


'BA':[1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0],


'CA':[1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1],


'DA':[1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],


'EA':[1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1],


'FA':[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
}



#DC components are differentially coded as (SIZE,Value)
def encodeDCToBoolList(value,isLuminance,debugMode = 0):
    print("==============================")
    print("enDC start")
    print("DC value=", value)
    boolList = []
    size = int(value).bit_length() # int(0).bit_length()=0
    print("DC size=", size)
    # sizeを出力
    if(isLuminance==1):
        boolList = boolList + DCLuminanceSizeToCode[size]
    else:
        boolList = boolList + DCChrominanceSizeToCode[size]
    # valueを出力
    if(value<=0): # if value==0, codeList = [], (SIZE,VALUE)=(SIZE)=EOB
        codeList = list(bin(value)[3:])
        print("codeList=", codeList)
        for i in range(len(codeList)):
            if (codeList[i] == '0'):
                codeList[i] = 1
            else:
                codeList[i] = 0
    else:
        codeList = list(bin(value)[2:])
        print("codeList=", codeList)
        for i in range(len(codeList)):
            if (codeList[i] == '0'):
                codeList[i] = 0
            else:
                codeList[i] = 1
    boolList = boolList + codeList
    if(debugMode == 1):
        if(isLuminance==1):
            print('isLuminance=',isLuminance,'(size,value)=',size,value,'code=',DCLuminanceSizeToCode[size],codeList)
        else:
            print('isLuminance=', isLuminance, '(size,value)=', size, value, 'code=', DCChrominanceSizeToCode[size],codeList)
    
    print("booList=", boolList)
    return boolList

def encodeACBlock(bitStream,ACArray,isLuminance,debugMode = 0):

    print("==============================")
    print("enAC start")
    print("isLuminance=", isLuminance)
    print("ACArray=", ACArray)

    i = 0
    maxI = numpy.size(ACArray)
    print("maxI", maxI)
    while 1:
        print("==============================")
        print("i=", i)
        if(i==maxI):
            print("maxI")
            break
        run = 0

        # check if rest of ACArray are all zero. If so, just write EOB and return
        j = i
        while 1:
            if(ACArray[j]!=0):
                print("i=", i, "j=", j)
                print("ACArray")
                break
            if(j==maxI - 1):
                print("i=", i, "j=", j)
                if (isLuminance == 1):
                    bitStream.append(ACLuminanceSizeToCode['00'])  # EOB
                    if (debugMode == 1):
                        print('EOB: code=', ACLuminanceSizeToCode['00'])
                else:
                    bitStream.append(ACChrominanceToCode['00'])
                    if (debugMode == 1):
                        print('EOB: code=', ACChrominanceToCode['00'])
                return
            j = j + 1
            #print("j=", j)

        print("next while")

        while 1:
            if(ACArray[i]!=0 or i==maxI - 1 or run==15):
                print("ACArray[i]=", ACArray[i])
                print("run15")
                break
            else:
                run = run + 1
                i = i + 1

        value = ACArray[i]

        if(value==0 and run!=15):
            print("runt!15")
            break # Rest of the components are zeros therefore we simply put the EOB to signify this fact

        size = int(value).bit_length()

        print("run=", run)
        print("hex(run)=", hex(run))
        print("size=", run)
        print("hex(size)=", hex(size))

        runSizeStr = str.upper(str(hex(run))[2:]) + str.upper(str(hex(size))[2:])

        print("test runSizeStr :", runSizeStr)
        print("test runSizeStr int:", int(runSizeStr))

        if (isLuminance == 1):
            print("ACLuminanceSizeToCode :", ACLuminanceSizeToCode[runSizeStr])
            bitStream.append(ACLuminanceSizeToCode[runSizeStr])
        else:
            print("ACChrominanceToCode :", ACChrominanceToCode[runSizeStr])
            bitStream.append(ACChrominanceToCode[runSizeStr])

        print("value=", value)
        if(value<=0):# if value==0, codeList = [], (SIZE,VALUE)=(SIZE,[])=EOB
            codeList = list(bin(value)[3:])
            print("codeList=", codeList)
            print("List codeList=", list(bin(value)[3:]))
            for k in range(len(codeList)):
                if (codeList[k] == '0'):
                    codeList[k] = 1
                else:
                    codeList[k] = 0
        else:
            codeList = list(bin(value)[2:])
            print("codeList=", codeList)
            print("List codeList=", list(bin(value)[2:]))
            for k in range(len(codeList)):
                if (codeList[k] == '0'):
                    codeList[k] = 0
                else:
                    codeList[k] = 1
        #bitStream.write(codeList, bool)
        bitStream.append(codeList)
        if(debugMode == 1):
            if(isLuminance==1):
                print('isLuminance=',isLuminance,'(run,size,value)=',run,size,value,'code=',ACLuminanceSizeToCode[runSizeStr],codeList)
            else:
                print('isLuminance=',isLuminance,'(run,size,value)=',run,size,value,'code=',ACChrominanceToCode[runSizeStr],codeList)

        i = i + 1


def check_coverage():
    expected_keys = {f"{run:X}{size:X}" for run in range(16) for size in range(11)}
    existing_keys = set(ACLuminanceSizeToCode.keys())

    missing_keys = expected_keys - existing_keys
    extra_keys = existing_keys - expected_keys

    if missing_keys:
        print("❌ 欠落しているキー:", missing_keys)
    else:
        print("✅ すべての (run, size) の組み合わせが含まれています。")

    if extra_keys:
        print("⚠️ 余分なキーが含まれています:", extra_keys)


def main():

    #check_coverage()

    '''
    Code = [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0]
    '''
    Code = [0, 11, 2, 1, 1, 2, 17, 17,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0]

    print("Code:", Code)

    sosBitStream = BitStream()
    encodeACBlock(sosBitStream,Code[1:], 1, 1)

    print("output")

    # 必要なパディングビットを計算
    bit_length = len(sosBitStream)
    print("bit_length:", bit_length)
    padding_bits = (8 - (bit_length % 8)) % 8

    # パディングを追加
    if padding_bits > 0:
        sosBitStream.append([0] * padding_bits)  # 0 を埋める

    print("============ Final Output ==================")
    print("sosBitStream (binary):", " ".join(f"{byte:08b}" for byte in sosBitStream.bytes))

if __name__ == '__main__':
    print("huffmanEncode Test:")
    main()
