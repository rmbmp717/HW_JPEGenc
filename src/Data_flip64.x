// NISHIHARU
// 10bit×64要素のデータを反転するか否か制御する DSLX 関数

// ヘルパー関数: 長さ64の配列を全てゼロで初期化
const ZERO64: s10[64] = [
  s10:0, s10:0, s10:0, s10:0, s10:0, s10:0, s10:0, s10:0,
  s10:0, s10:0, s10:0, s10:0, s10:0, s10:0, s10:0, s10:0,
  s10:0, s10:0, s10:0, s10:0, s10:0, s10:0, s10:0, s10:0,
  s10:0, s10:0, s10:0, s10:0, s10:0, s10:0, s10:0, s10:0,
  s10:0, s10:0, s10:0, s10:0, s10:0, s10:0, s10:0, s10:0,
  s10:0, s10:0, s10:0, s10:0, s10:0, s10:0, s10:0, s10:0,
  s10:0, s10:0, s10:0, s10:0, s10:0, s10:0, s10:0, s10:0,
  s10:0, s10:0, s10:0, s10:0, s10:0, s10:0, s10:0, s10:0,
];
  
fn Data_flip64(data_in: s10[64], is_flip: bool) -> s10[64] {
  // for ループのアキュムレータとしてゼロ初期化した配列を使用
  let result: s10[64] = for (i, acc): (u32, s10[64]) in range(u32:0, u32:64) {
    // 反転フラグが立っている場合は、インデックスを反転
    let src_index: u32 = if is_flip { u32:63 - i } else { i };
    // グローバル関数 update(acc, i, new_val) を利用して更新
    update(acc, i, data_in[src_index])
  }(ZERO64);
  result
}
  
#[test]
fn test0() -> () {
    let input_data: s10[64] = [
      s10:1, s10:2, s10:3, s10:0, s10:0, s10:0, s10:0, s10:0,
      s10:0, s10:0, s10:0, s10:0, s10:0, s10:0, s10:0, s10:0,
      s10:0, s10:0, s10:0, s10:0, s10:0, s10:0, s10:0, s10:0,
      s10:0, s10:0, s10:0, s10:0, s10:0, s10:0, s10:0, s10:0,
      s10:0, s10:0, s10:0, s10:0, s10:0, s10:0, s10:0, s10:0,
      s10:0, s10:0, s10:0, s10:0, s10:0, s10:0, s10:0, s10:0,
      s10:0, s10:0, s10:0, s10:0, s10:0, s10:0, s10:0, s10:0,
      s10:0, s10:0, s10:0, s10:0, s10:0, s10:0, s10:63, s10:64
    ];
    let exp_data: s10[64] = [
      s10:64,s10:63,s10:0, s10:0, s10:0, s10:0, s10:0, s10:0,
      s10:0, s10:0, s10:0, s10:0, s10:0, s10:0, s10:0, s10:0,
      s10:0, s10:0, s10:0, s10:0, s10:0, s10:0, s10:0, s10:0,
      s10:0, s10:0, s10:0, s10:0, s10:0, s10:0, s10:0, s10:0,
      s10:0, s10:0, s10:0, s10:0, s10:0, s10:0, s10:0, s10:0,
      s10:0, s10:0, s10:0, s10:0, s10:0, s10:0, s10:0, s10:0,
      s10:0, s10:0, s10:0, s10:0, s10:0, s10:0, s10:0, s10:0,
      s10:0, s10:0, s10:0, s10:0, s10:0, s10:3, s10:2, s10:1
    ];
    
    
    let result = Data_flip64(input_data, true);
    trace!(result);
    assert_eq(result, exp_data);
}
