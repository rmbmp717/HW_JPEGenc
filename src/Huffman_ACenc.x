// NISHIHARU

const EOB_LUM_EXT: bits[16] = bits[16]:0b1010;      // 仮の値

// JPEG 標準 AC ルミナンス用 Huffman 符号表
// キーは文字列 "01", "02", …, "FA" に対応し、
// 各タプルは (code, length) で、code は bits[16] に格納され（上位側に有効ビット）、
// length はその有効ビット数を示します。
const AC_LUMINANCE_SIZE_TO_CODE: (bits[16], u8)[162] = [
  // '01': [0,0] → "00", 2 ビット
  (bits[16]:0b00, u8:2),
  // '02': [0,1] → "01", 2 ビット
  (bits[16]:0b01, u8:2),
  // '03': [1,0,0] → "100", 3 ビット
  (bits[16]:0b100, u8:3),
  // '11': [1,0,1,0] → "1010", 4 ビット
  (bits[16]:0b1010, u8:4),
  // '04': [1,0,1,1] → "1011", 4 ビット
  (bits[16]:0b1011, u8:4),
  // '00': [1,1,0,0] → "1100", 4 ビット
  (bits[16]:0b1100, u8:4),
  // '05': [1,1,0,1,0] → "11010", 5 ビット
  (bits[16]:0b11010, u8:5),
  // '21': [1,1,0,1,1] → "11011", 5 ビット
  (bits[16]:0b11011, u8:5),
  // '12': [1,1,1,0,0] → "11100", 5 ビット
  (bits[16]:0b11100, u8:5),
  // '31': [1,1,1,0,1,0] → "111010", 6 ビット
  (bits[16]:0b111010, u8:6),
  // '41': [1,1,1,0,1,1] → "111011", 6 ビット
  (bits[16]:0b111011, u8:6),
  // '51': [1,1,1,1,0,0,0] → "1111000", 7 ビット
  (bits[16]:0b1111000, u8:7),
  // '06': [1,1,1,1,0,0,1] → "1111001", 7 ビット
  (bits[16]:0b1111001, u8:7),
  // '13': [1,1,1,1,0,1,0] → "1111010", 7 ビット
  (bits[16]:0b1111010, u8:7),
  // '61': [1,1,1,1,0,1,1] → "1111011", 7 ビット
  (bits[16]:0b1111011, u8:7),
  // '22': [1,1,1,1,1,0,0,0] → "11111000", 8 ビット
  (bits[16]:0b11111000, u8:8),
  // '71': [1,1,1,1,1,0,0,1] → "11111001", 8 ビット
  (bits[16]:0b11111001, u8:8),
  // '81': [1,1,1,1,1,0,1,0,0] → "111110100", 9 ビット
  (bits[16]:0b111110100, u8:9),
  // '14': [1,1,1,1,1,0,1,0,1] → "111110101", 9 ビット
  (bits[16]:0b111110101, u8:9),
  // '32': [1,1,1,1,1,0,1,1,0] → "111110110", 9 ビット
  (bits[16]:0b111110110, u8:9),
  // '91': [1,1,1,1,1,0,1,1,1] → "111110111", 9 ビット
  (bits[16]:0b111110111, u8:9),
  // 'A1': [1,1,1,1,1,1,0,0,0] → "111111000", 9 ビット
  (bits[16]:0b111111000, u8:9),
  // '07': [1,1,1,1,1,1,0,0,1] → "111111001", 9 ビット
  (bits[16]:0b111111001, u8:9),
  // '15': [1,1,1,1,1,1,0,1,0,0] → "1111110100", 10 ビット
  (bits[16]:0b1111110100, u8:10),
  // 'B1': [1,1,1,1,1,1,0,1,0,1] → "1111110101", 10 ビット
  (bits[16]:0b1111110101, u8:10),
  // '42': [1,1,1,1,1,1,0,1,1,0] → "1111110110", 10 ビット
  (bits[16]:0b1111110110, u8:10),
  // '23': [1,1,1,1,1,1,0,1,1,1] → "1111110111", 10 ビット
  (bits[16]:0b1111110111, u8:10),
  // 'C1': [1,1,1,1,1,1,1,0,0,0] → "1111111000", 10 ビット
  (bits[16]:0b1111111000, u8:10),
  // '52': [1,1,1,1,1,1,1,0,0,1] → "1111111001", 10 ビット
  (bits[16]:0b1111111001, u8:10),
  // 'D1': [1,1,1,1,1,1,1,0,1,0] → "1111111010", 10 ビット
  (bits[16]:0b1111111010, u8:10),
  // 'E1': [1,1,1,1,1,1,1,0,1,1,0] → "11111110110", 11 ビット
  (bits[16]:0b11111110110, u8:11),
  // '33': [1,1,1,1,1,1,1,0,1,1,1] → "11111110111", 11 ビット
  (bits[16]:0b11111110111, u8:11),
  // '16': [1,1,1,1,1,1,1,1,0,0,0] → "11111111000", 11 ビット
  (bits[16]:0b11111111000, u8:11),
  // '62': [1,1,1,1,1,1,1,1,0,0,1,0] → "111111110010", 12 ビット
  (bits[16]:0b111111110010, u8:12),
  // 'F0': [1,1,1,1,1,1,1,1,0,0,1,1] → "111111110011", 12 ビット
  (bits[16]:0b111111110011, u8:12),
  // '24': [1,1,1,1,1,1,1,1,0,1,0,0] → "111111110100", 12 ビット
  (bits[16]:0b111111110100, u8:12),
  // '72': [1,1,1,1,1,1,1,1,0,1,0,1] → "111111110101", 12 ビット
  (bits[16]:0b111111110101, u8:12),
  // '82': [1,1,1,1,1,1,1,1,0,1,1,0,0] → "11111111010100", 13 ビット
  (bits[16]:0b11111111010100, u8:13),
  // 'F1': [1,1,1,1,1,1,1,1,0,1,1,0,1] → "11111111010101", 13 ビット
  (bits[16]:0b11111111010101, u8:13),
  // '25': [1,1,1,1,1,1,1,1,0,1,1,1,0,0] → "1111111101011100", 14 ビット
  (bits[16]:0b1111111101011100, u8:14),
  // '43': [1,1,1,1,1,1,1,1,0,1,1,1,0,1] → "1111111101011101", 14 ビット
  (bits[16]:0b1111111101011101, u8:14),
  // '34': [1,1,1,1,1,1,1,1,0,1,1,1,1,0] → "1111111101011110", 14 ビット
  (bits[16]:0b1111111101011110, u8:14),
  // '53': [1,1,1,1,1,1,1,1,0,1,1,1,1,1] → "1111111101011111", 14 ビット
  (bits[16]:0b1111111101011111, u8:14),
  // '92': [1,1,1,1,1,1,1,1,1,0,0,0,0,0] → "111111111000000", 15 ビット
  (bits[16]:0b111111111000000, u8:15),
  // 'A2': [1,1,1,1,1,1,1,1,1,0,0,0,0,1] → "111111111000001", 15 ビット
  (bits[16]:0b111111111000001, u8:15),
  // 'B2': [1,1,1,1,1,1,1,1,1,0,0,0,1,0,0] → "1111111110000100", 15 ビット
  (bits[16]:0b1111111110000100, u8:15),
  // '63': [1,1,1,1,1,1,1,1,1,0,0,0,1,0,1] → "1111111110000101", 15 ビット
  (bits[16]:0b1111111110000101, u8:15),
  // '73': [1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0] → "1111111110001100", 16 ビット
  (bits[16]:0b1111111110001100, u8:16),
  // 'C2': [1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,1] → "1111111110001101", 16 ビット
  (bits[16]:0b1111111110001101, u8:16),
  // '35': [1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0] → "1111111110001110", 16 ビット
  (bits[16]:0b1111111110001110, u8:16),
  // '44': [1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1] → "1111111110001111", 16 ビット
  (bits[16]:0b1111111110001111, u8:16),
  // '27': [1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0] → "1111111110010000", 16 ビット
  (bits[16]:0b1111111110010000, u8:16),
  // '93': [1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,1] → "1111111110010001", 16 ビット
  (bits[16]:0b1111111110010001, u8:16),
  // 'A3': [1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,0] → "1111111110010010", 16 ビット
  (bits[16]:0b1111111110010010, u8:16),
  // 'B3': [1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,1] → "1111111110010011", 16 ビット
  (bits[16]:0b1111111110010011, u8:16),
  // '36': [1,1,1,1,1,1,1,1,1,0,0,1,0,1,0,0] → "1111111110010100", 16 ビット
  (bits[16]:0b1111111110010100, u8:16),
  // '17': [1,1,1,1,1,1,1,1,1,0,0,1,0,1,0,1] → "1111111110010101", 16 ビット
  (bits[16]:0b1111111110010101, u8:16),
  // '54': [1,1,1,1,1,1,1,1,1,0,0,1,0,1,1,0] → "1111111110010110", 16 ビット
  (bits[16]:0b1111111110010110, u8:16),
  // '64': [1,1,1,1,1,1,1,1,1,0,0,1,0,1,1,1] → "1111111110010111", 16 ビット
  (bits[16]:0b1111111110010111, u8:16),
  // '74': [1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,0] → "1111111110011000", 16 ビット
  (bits[16]:0b1111111110011000, u8:16),
  // 'C3': [1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1] → "1111111110011001", 16 ビット
  (bits[16]:0b1111111110011001, u8:16),
  // 'D2': [1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,0] → "1111111110011010", 16 ビット
  (bits[16]:0b1111111110011010, u8:16),
  // 'E2': [1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,1] → "1111111110011011", 16 ビット
  (bits[16]:0b1111111110011011, u8:16),
  // '08': [1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,0] → "1111111110011100", 16 ビット
  (bits[16]:0b1111111110011100, u8:16),
  // '26': [1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1] → "1111111110011101", 16 ビット
  (bits[16]:0b1111111110011101, u8:16),
  // '83': [1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0] → "1111111110011110", 16 ビット
  (bits[16]:0b1111111110011110, u8:16),
  // '09': [1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1] → "1111111110011111", 16 ビット
  (bits[16]:0b1111111110011111, u8:16),
  // '0A': [1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0] → "1111111110100000", 16 ビット
  (bits[16]:0b1111111110100000, u8:16),
  // '18': [1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,1] → "1111111110100001", 16 ビット
  (bits[16]:0b1111111110100001, u8:16),
  // '19': [1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,0] → "1111111110100010", 16 ビット
  (bits[16]:0b1111111110100010, u8:16),
  // '84': [1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,1] → "1111111110100011", 16 ビット
  (bits[16]:0b1111111110100011, u8:16),
  // '94': [1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0] → "1111111110100100", 16 ビット
  (bits[16]:0b1111111110100100, u8:16),
  // '45': [1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,1] → "1111111110100101", 16 ビット
  (bits[16]:0b1111111110100101, u8:16),
  // '46': [1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,0] → "1111111110100110", 16 ビット
  (bits[16]:0b1111111110100110, u8:16),
  // 'A4': [1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,1] → "1111111110100111", 16 ビット
  (bits[16]:0b1111111110100111, u8:16),
  // 'B4': [1,1,1,1,1,1,1,1,1,0,1,0,1,0,0,0] → "1111111110101000", 16 ビット
  (bits[16]:0b1111111110101000, u8:16),
  // '56': [1,1,1,1,1,1,1,1,1,0,1,0,1,0,0,1] → "1111111110101001", 16 ビット
  (bits[16]:0b1111111110101001, u8:16),
  // 'D3': [1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0] → "1111111110101010", 16 ビット
  (bits[16]:0b1111111110101010, u8:16),
  // '55': [1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,1] → "1111111110101011", 16 ビット
  (bits[16]:0b1111111110101011, u8:16),
  // '28': [1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,0] → "1111111110101100", 16 ビット
  (bits[16]:0b1111111110101100, u8:16),
  // '1A': [1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,1] → "1111111110101101", 16 ビット
  (bits[16]:0b1111111110101101, u8:16),
  // 'F2': [1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0] → "1111111110101110", 16 ビット
  (bits[16]:0b1111111110101110, u8:16),
  // 'E3': [1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1] → "1111111110101111", 16 ビット
  (bits[16]:0b1111111110101111, u8:16),
  // 'F3': [1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0] → "1111111110110000", 16 ビット
  (bits[16]:0b1111111110110000, u8:16),
  // 'C4': [1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,1] → "1111111110110001", 16 ビット
  (bits[16]:0b1111111110110001, u8:16),
  // 'D4': [1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,0] → "1111111110110010", 16 ビット
  (bits[16]:0b1111111110110010, u8:16),
  // 'E4': [1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1] → "1111111110110011", 16 ビット
  (bits[16]:0b1111111110110011, u8:16),
  // 'F4': [1,1,1,1,1,1,1,1,1,0,1,1,0,1,0,0] → "1111111110110100", 16 ビット
  (bits[16]:0b1111111110110100, u8:16),
  // '65': [1,1,1,1,1,1,1,1,1,0,1,1,0,1,0,1] → "1111111110110101", 16 ビット
  (bits[16]:0b1111111110110101, u8:16),
  // '75': [1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0] → "1111111110110110", 16 ビット
  (bits[16]:0b1111111110110110, u8:16),
  // '85': [1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1] → "1111111110110111", 16 ビット
  (bits[16]:0b1111111110110111, u8:16),
  // '95': [1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0] → "1111111110111000", 16 ビット
  (bits[16]:0b1111111110111000, u8:16),
  // 'A5': [1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1] → "1111111110111001", 16 ビット
  (bits[16]:0b1111111110111001, u8:16),
  // 'B5': [1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0] → "1111111110111010", 16 ビット
  (bits[16]:0b1111111110111010, u8:16),
  // 'C5': [1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1] → "1111111110111011", 16 ビット
  (bits[16]:0b1111111110111011, u8:16),
  // 'D5': [1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0] → "1111111110111100", 16 ビット
  (bits[16]:0b1111111110111100, u8:16),
  // 'E5': [1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1] → "1111111110111101", 16 ビット
  (bits[16]:0b1111111110111101, u8:16),
  // 'F5': [1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0] → "1111111110111110", 16 ビット
  (bits[16]:0b1111111110111110, u8:16),
  // '66': [1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1] → "1111111110111111", 16 ビット
  (bits[16]:0b1111111110111111, u8:16),
  // '76': [1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0] → "1111111111000000", 16 ビット
  (bits[16]:0b1111111111000000, u8:16),
  // '86': [1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1] → "1111111111000001", 16 ビット
  (bits[16]:0b1111111111000001, u8:16),
  // '96': [1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,0] → "1111111111000010", 16 ビット
  (bits[16]:0b1111111111000010, u8:16),
  // 'A6': [1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1] → "1111111111000011", 16 ビット
  (bits[16]:0b1111111111000011, u8:16),
  // 'B6': [1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0] → "1111111111000100", 16 ビット
  (bits[16]:0b1111111111000100, u8:16),
  // 'C6': [1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,1] → "1111111111000101", 16 ビット
  (bits[16]:0b1111111111000101, u8:16),
  // 'D6': [1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0] → "1111111111000110", 16 ビット
  (bits[16]:0b1111111111000110, u8:16),
  // 'E6': [1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1] → "1111111111000111", 16 ビット
  (bits[16]:0b1111111111000111, u8:16),
  // 'F6': [1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0] → "1111111111001000", 16 ビット
  (bits[16]:0b1111111111001000, u8:16),
  // '37': [1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1] → "1111111111001001", 16 ビット
  (bits[16]:0b1111111111001001, u8:16),
  // '47': [1,1,1,1,1,1,1,1,1,1,0,0,1,0,1,0] → "1111111111001010", 16 ビット
  (bits[16]:0b1111111111001010, u8:16),
  // '57': [1,1,1,1,1,1,1,1,1,1,0,0,1,0,1,1] → "1111111111001011", 16 ビット
  (bits[16]:0b1111111111001011, u8:16),
  // '67': [1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0] → "1111111111001100", 16 ビット
  (bits[16]:0b1111111111001100, u8:16),
  // '77': [1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,1] → "1111111111001101", 16 ビット
  (bits[16]:0b1111111111001101, u8:16),
  // '87': [1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0] → "1111111111001110", 16 ビット
  (bits[16]:0b1111111111001110, u8:16),
  // '97': [1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1] → "1111111111001111", 16 ビット
  (bits[16]:0b1111111111001111, u8:16),
  // 'A7': [1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0] → "1111111111010000", 16 ビット
  (bits[16]:0b1111111111010000, u8:16),
  // 'B7': [1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1] → "1111111111010001", 16 ビット
  (bits[16]:0b1111111111010001, u8:16),
  // 'C7': [1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0] → "1111111111010010", 16 ビット
  (bits[16]:0b1111111111010010, u8:16),
  // 'D7': [1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1] → "1111111111010011", 16 ビット
  (bits[16]:0b1111111111010011, u8:16),
  // 'E7': [1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,0] → "1111111111010100", 16 ビット
  (bits[16]:0b1111111111010100, u8:16),
  // 'F7': [1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1] → "1111111111010101", 16 ビット
  (bits[16]:0b1111111111010101, u8:16),
  // '38': [1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,0] → "1111111111010110", 16 ビット
  (bits[16]:0b1111111111010110, u8:16),
  // '48': [1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1] → "1111111111010111", 16 ビット
  (bits[16]:0b1111111111010111, u8:16),
  // '58': [1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0] → "1111111111011000", 16 ビット
  (bits[16]:0b1111111111011000, u8:16),
  // '68': [1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1] → "1111111111011001", 16 ビット
  (bits[16]:0b1111111111011001, u8:16),
  // '78': [1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,0] → "1111111111011010", 16 ビット
  (bits[16]:0b1111111111011010, u8:16),
  // '88': [1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1] → "1111111111011011", 16 ビット
  (bits[16]:0b1111111111011011, u8:16),
  // '98': [1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0] → "1111111111011100", 16 ビット
  (bits[16]:0b1111111111011100, u8:16),
  // 'A8': [1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1] → "1111111111011101", 16 ビット
  (bits[16]:0b1111111111011101, u8:16),
  // 'B8': [1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0] → "1111111111011110", 16 ビット
  (bits[16]:0b1111111111011110, u8:16),
  // 'C8': [1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1] → "1111111111011111", 16 ビット
  (bits[16]:0b1111111111011111, u8:16),
  // 'D8': [1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0] → "1111111111100000", 16 ビット
  (bits[16]:0b1111111111100000, u8:16),
  // 'E8': [1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1] → "1111111111100001", 16 ビット
  (bits[16]:0b1111111111100001, u8:16),
  // 'F8': [1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0] → "1111111111100010", 16 ビット
  (bits[16]:0b1111111111100010, u8:16),
  // '29': [1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1] → "1111111111100011", 16 ビット
  (bits[16]:0b1111111111100011, u8:16),
  // '39': [1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0] → "1111111111100100", 16 ビット
  (bits[16]:0b1111111111100100, u8:16),
  // '49': [1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,1] → "1111111111100101", 16 ビット
  (bits[16]:0b1111111111100101, u8:16),
  // '59': [1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0] → "1111111111100110", 16 ビット
  (bits[16]:0b1111111111100110, u8:16),
  // '69': [1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1] → "1111111111100111", 16 ビット
  (bits[16]:0b1111111111100111, u8:16),
  // '79': [1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0] → "1111111111101000", 16 ビット
  (bits[16]:0b1111111111101000, u8:16),
  // '89': [1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1] → "1111111111101001", 16 ビット
  (bits[16]:0b1111111111101001, u8:16),
  // '99': [1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0] → "1111111111101010", 16 ビット
  (bits[16]:0b1111111111101010, u8:16),
  // 'A9': [1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1] → "1111111111101011", 16 ビット
  (bits[16]:0b1111111111101011, u8:16),
  // 'B9': [1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0] → "1111111111101100", 16 ビット
  (bits[16]:0b1111111111101100, u8:16),
  // 'C9': [1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1] → "1111111111101101", 16 ビット
  (bits[16]:0b1111111111101101, u8:16),
  // 'D9': [1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0] → "1111111111101110", 16 ビット
  (bits[16]:0b1111111111101110, u8:16),
  // 'E9': [1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1] → "1111111111101111", 16 ビット
  (bits[16]:0b1111111111101111, u8:16),
  // 'F9': [1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0] → "1111111111110000", 16 ビット
  (bits[16]:0b1111111111110000, u8:16),
  // '2A': [1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1] → "1111111111110001", 16 ビット
  (bits[16]:0b1111111111110001, u8:16),
  // '3A': [1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0] → "1111111111110010", 16 ビット
  (bits[16]:0b1111111111110010, u8:16),
  // '4A': [1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1] → "1111111111110011", 16 ビット
  (bits[16]:0b1111111111110011, u8:16),
  // '5A': [1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0] → "1111111111110100", 16 ビット
  (bits[16]:0b1111111111110100, u8:16),
  // '6A': [1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1] → "1111111111110101", 16 ビット
  (bits[16]:0b1111111111110101, u8:16),
  // '7A': [1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0] → "1111111111110110", 16 ビット
  (bits[16]:0b1111111111110110, u8:16),
  // '8A': [1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1] → "1111111111110111", 16 ビット
  (bits[16]:0b1111111111110111, u8:16),
  // '9A': [1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0] → "1111111111111000", 16 ビット
  (bits[16]:0b1111111111111000, u8:16),
  // 'AA': [1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1] → "1111111111111001", 16 ビット
  (bits[16]:0b1111111111111001, u8:16),
  // 'BA': [1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0] → "1111111111111010", 16 ビット
  (bits[16]:0b1111111111111010, u8:16),
  // 'CA': [1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1] → "1111111111111011", 16 ビット
  (bits[16]:0b1111111111111011, u8:16),
  // 'DA': [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0] → "1111111111111100", 16 ビット
  (bits[16]:0b1111111111111100, u8:16),
  // 'EA': [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1] → "1111111111111101", 16 ビット
  (bits[16]:0b1111111111111101, u8:16),
  // 'FA': [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0] → "1111111111111110", 16 ビット
  (bits[16]:0b1111111111111110, u8:16),
];

// lookup 関数：与えられたインデックス (u8) から対応する Huffman コード (code, length) を返す
fn lookup_ACLuminanceToCode(index: u8) -> (bits[16], u8) {
  AC_LUMINANCE_SIZE_TO_CODE[index]
}

const AC_CHROMINANCE_SIZE_TO_CODE: (bits[16], u8)[162] = [
    // '01': [0,0]
    (bits[16]:0b00, u8:2),
    // '00': [0,1]
    (bits[16]:0b01, u8:2),
    // '02': [1,0,0]
    (bits[16]:0b100, u8:3),
    // '11': [1,0,1]
    (bits[16]:0b101, u8:3),
    // '03': [1,1,0,0]
    (bits[16]:0b1100, u8:4),
    // '04': [1,1,0,1,0]
    (bits[16]:0b11010, u8:5),
    // '21': [1,1,0,1,1]
    (bits[16]:0b11011, u8:5),
    // '12': [1,1,1,0,0,0]
    (bits[16]:0b111000, u8:6),
    // '31': [1,1,1,0,0,1]
    (bits[16]:0b111001, u8:6),
    // '41': [1,1,1,0,1,0]
    (bits[16]:0b111010, u8:6),
    // '05': [1,1,1,0,1,1,0]
    (bits[16]:0b1110110, u8:7),
    // '51': [1,1,1,0,1,1,1]
    (bits[16]:0b1110111, u8:7),
    // '13': [1,1,1,1,0,0,0]
    (bits[16]:0b1111000, u8:7),
    // '61': [1,1,1,1,0,0,1]
    (bits[16]:0b1111001, u8:7),
    // '22': [1,1,1,1,0,1,0]
    (bits[16]:0b1111010, u8:7),
    // '06': [1,1,1,1,0,1,1,0]
    (bits[16]:0b11110110, u8:8),
    // '71': [1,1,1,1,0,1,1,1]
    (bits[16]:0b11110111, u8:8),
    // '81': [1,1,1,1,1,0,0,0]
    (bits[16]:0b11111000, u8:8),
    // '91': [1,1,1,1,1,0,0,1]
    (bits[16]:0b11111001, u8:8),
    // '32': [1,1,1,1,1,0,1,0]
    (bits[16]:0b11111010, u8:8),
    // 'A1': [1,1,1,1,1,0,1,1,0]
    (bits[16]:0b111110110, u8:9),
    // 'B1': [1,1,1,1,1,0,1,1,1]
    (bits[16]:0b111110111, u8:9),
    // 'F0': [1,1,1,1,1,1,0,0,0]
    (bits[16]:0b111111000, u8:9),
    // '14': [1,1,1,1,1,1,0,0,1]
    (bits[16]:0b111111001, u8:9),
    // 'C1': [1,1,1,1,1,1,0,1,0,0]
    (bits[16]:0b1111110100, u8:10),
    // 'D1': [1,1,1,1,1,1,0,1,0,1]
    (bits[16]:0b1111110101, u8:10),
    // 'E1': [1,1,1,1,1,1,0,1,1,0]
    (bits[16]:0b1111110110, u8:10),
    // '23': [1,1,1,1,1,1,0,1,1,1]
    (bits[16]:0b1111110111, u8:10),
    // '42': [1,1,1,1,1,1,1,0,0,0]
    (bits[16]:0b1111111000, u8:10),
    // '15': [1,1,1,1,1,1,1,0,0,1,0]
    (bits[16]:0b11111110010, u8:11),
    // '52': [1,1,1,1,1,1,1,0,0,1,1]
    (bits[16]:0b11111110011, u8:11),
    // '62': [1,1,1,1,1,1,1,0,1,0,0]
    (bits[16]:0b11111110100, u8:11),
    // '72': [1,1,1,1,1,1,1,0,1,0,1]
    (bits[16]:0b11111110101, u8:11),
    // 'F1': [1,1,1,1,1,1,1,0,1,1,0]
    (bits[16]:0b11111110110, u8:11),
    // '33': [1,1,1,1,1,1,1,0,1,1,1]
    (bits[16]:0b11111110111, u8:11),
    // '24': [1,1,1,1,1,1,1,1,0,0,0,0]
    (bits[16]:0b111111110000, u8:12),
    // '34': [1,1,1,1,1,1,1,1,0,0,0,1]
    (bits[16]:0b111111110001, u8:12),
    // '43': [1,1,1,1,1,1,1,1,0,0,1,0]
    (bits[16]:0b111111110010, u8:12),
    // '82': [1,1,1,1,1,1,1,1,0,0,1,1]
    (bits[16]:0b111111110011, u8:12),
    // '16': [1,1,1,1,1,1,1,1,0,1,0,0,0]
    (bits[16]:0b1111111101000, u8:13),
    // '92': [1,1,1,1,1,1,1,1,0,1,0,0,1]
    (bits[16]:0b1111111101001, u8:13),
    // '53': [1,1,1,1,1,1,1,1,0,1,0,1,0]
    (bits[16]:0b1111111101010, u8:13),
    // '25': [1,1,1,1,1,1,1,1,0,1,0,1,1]
    (bits[16]:0b1111111101011, u8:13),
    // 'A2': [1,1,1,1,1,1,1,1,0,1,1,0,0]
    (bits[16]:0b1111111101100, u8:13),
    // '63': [1,1,1,1,1,1,1,1,0,1,1,0,1]
    (bits[16]:0b1111111101101, u8:13),
    // 'B2': [1,1,1,1,1,1,1,1,0,1,1,1,0]
    (bits[16]:0b1111111101110, u8:13),
    // 'C2': [1,1,1,1,1,1,1,1,0,1,1,1,1]
    (bits[16]:0b1111111101111, u8:13),
    // '07': [1,1,1,1,1,1,1,1,1,0,0,0,0,0]
    (bits[16]:0b11111111100000, u8:14),
    // '73': [1,1,1,1,1,1,1,1,1,0,0,0,0,1]
    (bits[16]:0b11111111100001, u8:14),
    // 'D2': [1,1,1,1,1,1,1,1,1,0,0,0,1,0]
    (bits[16]:0b11111111100010, u8:14),
    // '35': [1,1,1,1,1,1,1,1,1,0,0,0,1,1,0]
    (bits[16]:0b111111111000110, u8:15),
    // 'E2': [1,1,1,1,1,1,1,1,1,0,0,0,1,1,1]
    (bits[16]:0b111111111000111, u8:15),
    // '44': [1,1,1,1,1,1,1,1,1,0,0,1,0,0,0]
    (bits[16]:0b111111111001000, u8:15),
    // '83': [1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,0]
    (bits[16]:0b1111111110010010, u8:16),
    // '17': [1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,1]
    (bits[16]:0b1111111110010011, u8:16),
    // '54': [1,1,1,1,1,1,1,1,1,0,0,1,0,1,0,0]
    (bits[16]:0b1111111110010100, u8:16),
    // '93': [1,1,1,1,1,1,1,1,1,0,0,1,0,1,0,1]
    (bits[16]:0b1111111110010101, u8:16),
    // '08': [1,1,1,1,1,1,1,1,1,0,0,1,0,1,1,0]
    (bits[16]:0b1111111110010110, u8:16),
    // '09': [1,1,1,1,1,1,1,1,1,0,0,1,0,1,1,1]
    (bits[16]:0b1111111110010111, u8:16),
    // '0A': [1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,0]
    (bits[16]:0b1111111110011000, u8:16),
    // '18': [1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1]
    (bits[16]:0b1111111110011001, u8:16),
    // '19': [1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,0]
    (bits[16]:0b1111111110011010, u8:16),
    // '26': [1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,1]
    (bits[16]:0b1111111110011011, u8:16),
    // '36': [1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,0]
    (bits[16]:0b1111111110011100, u8:16),
    // '45': [1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1]
    (bits[16]:0b1111111110011101, u8:16),
    // '1A': [1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0]
    (bits[16]:0b1111111110011110, u8:16),
    // '27': [1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1]
    (bits[16]:0b1111111110011111, u8:16),
    // '64': [1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0]
    (bits[16]:0b1111111110100000, u8:16),
    // '74': [1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,1]
    (bits[16]:0b1111111110100001, u8:16),
    // '55': [1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,0]
    (bits[16]:0b1111111110100010, u8:16),
    // '37': [1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,1]
    (bits[16]:0b1111111110100011, u8:16),
    // 'F2': [1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0]
    (bits[16]:0b1111111110100100, u8:16),
    // 'A3': [1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,1]
    (bits[16]:0b1111111110100101, u8:16),
    // 'B3': [1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,0]
    (bits[16]:0b1111111110100110, u8:16),
    // 'C3': [1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,1]
    (bits[16]:0b1111111110100111, u8:16),
    // '28': [1,1,1,1,1,1,1,1,1,0,1,0,1,0,0,0]
    (bits[16]:0b1111111110101000, u8:16),
    // '29': [1,1,1,1,1,1,1,1,1,0,1,0,1,0,0,1]
    (bits[16]:0b1111111110101001, u8:16),
    // 'D3': [1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0]
    (bits[16]:0b1111111110101010, u8:16),
    // 'E3': [1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,1]
    (bits[16]:0b1111111110101011, u8:16),
    // 'F3': [1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,0]
    (bits[16]:0b1111111110101100, u8:16),
    // '84': [1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,1]
    (bits[16]:0b1111111110101101, u8:16),
    // '94': [1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0]
    (bits[16]:0b1111111110101110, u8:16),
    // 'A4': [1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1]
    (bits[16]:0b1111111110101111, u8:16),
    // 'B4': [1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0]
    (bits[16]:0b1111111110110000, u8:16),
    // 'C4': [1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,1]
    (bits[16]:0b1111111110110001, u8:16),
    // 'D4': [1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,0]
    (bits[16]:0b1111111110110010, u8:16),
    // 'E4': [1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1]
    (bits[16]:0b1111111110110011, u8:16),
    // 'F4': [1,1,1,1,1,1,1,1,1,0,1,1,0,1,0,0]
    (bits[16]:0b1111111110110100, u8:16),
    // '65': [1,1,1,1,1,1,1,1,1,0,1,1,0,1,0,1]
    (bits[16]:0b1111111110110101, u8:16),
    // '75': [1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0]
    (bits[16]:0b1111111110110110, u8:16),
    // '85': [1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1]
    (bits[16]:0b1111111110110111, u8:16),
    // '95': [1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0]
    (bits[16]:0b1111111110111000, u8:16),
    // 'A5': [1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1]
    (bits[16]:0b1111111110111001, u8:16),
    // 'B5': [1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0]
    (bits[16]:0b1111111110111010, u8:16),
    // 'C5': [1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1]
    (bits[16]:0b1111111110111011, u8:16),
    // 'D5': [1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0]
    (bits[16]:0b1111111110111100, u8:16),
    // 'E5': [1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1]
    (bits[16]:0b1111111110111101, u8:16),
    // 'F5': [1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0]
    (bits[16]:0b1111111110111110, u8:16),
    // '46': [1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1]
    (bits[16]:0b1111111110111111, u8:16),
    // '56': [1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0]
    (bits[16]:0b1111111111000000, u8:16),
    // '66': [1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1]
    (bits[16]:0b1111111111000001, u8:16),
    // '76': [1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,0]
    (bits[16]:0b1111111111000010, u8:16),
    // '86': [1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1]
    (bits[16]:0b1111111111000011, u8:16),
    // '96': [1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0]
    (bits[16]:0b1111111111000100, u8:16),
    // 'A6': [1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,1]
    (bits[16]:0b1111111111000101, u8:16),
    // 'B6': [1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0]
    (bits[16]:0b1111111111000110, u8:16),
    // 'C6': [1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1]
    (bits[16]:0b1111111111000111, u8:16),
    // 'D6': [1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0]
    (bits[16]:0b1111111111001000, u8:16),
    // 'E6': [1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1]
    (bits[16]:0b1111111111001001, u8:16),
    // 'F6': [1,1,1,1,1,1,1,1,1,1,0,0,1,0,1,0]
    (bits[16]:0b1111111111001010, u8:16),
    // '47': [1,1,1,1,1,1,1,1,1,1,0,0,1,0,1,1]
    (bits[16]:0b1111111111001011, u8:16),
    // '57': [1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0]
    (bits[16]:0b1111111111001100, u8:16),
    // '67': [1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,1]
    (bits[16]:0b1111111111001101, u8:16),
    // '77': [1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0]
    (bits[16]:0b1111111111001110, u8:16),
    // '87': [1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1]
    (bits[16]:0b1111111111001111, u8:16),
    // '97': [1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0]
    (bits[16]:0b1111111111010000, u8:16),
    // 'A7': [1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1]
    (bits[16]:0b1111111111010001, u8:16),
    // 'B7': [1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0]
    (bits[16]:0b1111111111010010, u8:16),
    // 'C7': [1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1]
    (bits[16]:0b1111111111010011, u8:16),
    // 'D7': [1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,0]
    (bits[16]:0b1111111111010100, u8:16),
    // 'E7': [1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1]
    (bits[16]:0b1111111111010101, u8:16),
    // 'F7': [1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,0]
    (bits[16]:0b1111111111010110, u8:16),
    // '38': [1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1]
    (bits[16]:0b1111111111010111, u8:16),
    // '48': [1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0]
    (bits[16]:0b1111111111011000, u8:16),
    // '58': [1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1]
    (bits[16]:0b1111111111011001, u8:16),
    // '68': [1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,0]
    (bits[16]:0b1111111111011010, u8:16),
    // '78': [1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1]
    (bits[16]:0b1111111111011011, u8:16),
    // '88': [1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0]
    (bits[16]:0b1111111111011100, u8:16),
    // '98': [1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1]
    (bits[16]:0b1111111111011101, u8:16),
    // 'A8': [1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0]
    (bits[16]:0b1111111111011110, u8:16),
    // 'B8': [1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1]
    (bits[16]:0b1111111111011111, u8:16),
    // 'C8': [1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0]
    (bits[16]:0b1111111111100000, u8:16),
    // 'D8': [1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1]
    (bits[16]:0b1111111111100001, u8:16),
    // 'E8': [1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0]
    (bits[16]:0b1111111111100010, u8:16),
    // 'F8': [1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1]
    (bits[16]:0b1111111111100011, u8:16),
    // '39': [1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0]
    (bits[16]:0b1111111111100100, u8:16),
    // '49': [1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,1]
    (bits[16]:0b1111111111100101, u8:16),
    // '59': [1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0]
    (bits[16]:0b1111111111100110, u8:16),
    // '69': [1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1]
    (bits[16]:0b1111111111100111, u8:16),
    // '79': [1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0]
    (bits[16]:0b1111111111101000, u8:16),
    // '89': [1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1]
    (bits[16]:0b1111111111101001, u8:16),
    // '99': [1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0]
    (bits[16]:0b1111111111101010, u8:16),
    // 'A9': [1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1]
    (bits[16]:0b1111111111101011, u8:16),
    // 'B9': [1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0]
    (bits[16]:0b1111111111101100, u8:16),
    // 'C9': [1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1]
    (bits[16]:0b1111111111101101, u8:16),
    // 'D9': [1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0]
    (bits[16]:0b1111111111101110, u8:16),
    // 'E9': [1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1]
    (bits[16]:0b1111111111101111, u8:16),
    // 'F9': [1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0]
    (bits[16]:0b1111111111110000, u8:16),
    // '2A': [1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1]
    (bits[16]:0b1111111111110001, u8:16),
    // '3A': [1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0]
    (bits[16]:0b1111111111110010, u8:16),
    // '4A': [1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1]
    (bits[16]:0b1111111111110011, u8:16),
    // '5A': [1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0]
    (bits[16]:0b1111111111110100, u8:16),
    // '6A': [1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1]
    (bits[16]:0b1111111111110101, u8:16),
    // '7A': [1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0]
    (bits[16]:0b1111111111110110, u8:16),
    // '8A': [1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1]
    (bits[16]:0b1111111111110111, u8:16),
    // '9A': [1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0]
    (bits[16]:0b1111111111111000, u8:16),
    // 'AA': [1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1]
    (bits[16]:0b1111111111111001, u8:16),
    // 'BA': [1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0]
    (bits[16]:0b1111111111111010, u8:16),
    // 'CA': [1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1]
    (bits[16]:0b1111111111111011, u8:16),
    // 'DA': [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0]
    (bits[16]:0b1111111111111100, u8:16),
    // 'EA': [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1]
    (bits[16]:0b1111111111111101, u8:16),
    // 'FA': [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0]
    (bits[16]:0b1111111111111110, u8:16)
  ];


// 指定したインデックスの Huffman コードを取得する関数
fn lookup_ACChrominanceToCode(index: u8) -> (bits[16], u8) {
    AC_CHROMINANCE_SIZE_TO_CODE[index]
}

// 8×8 の u8 行列を平坦化して 64 要素の u8 配列にする関数
fn flatten(matrix: u8[8][8]) -> u8[64] {
    let row0: u8[8] = matrix[0];
    let row1: u8[8] = matrix[1];
    let row2: u8[8] = matrix[2];
    let row3: u8[8] = matrix[3];
    let row4: u8[8] = matrix[4];
    let row5: u8[8] = matrix[5];
    let row6: u8[8] = matrix[6];
    let row7: u8[8] = matrix[7];

    let flat: u8[64] = row0 ++ row1 ++ row2 ++ row3 ++ row4 ++ row5 ++ row6 ++ row7;
    flat
}

// AC 成分（63 要素）のすべてが 0 かどうか判定する関数
fn is_all_zero(ac: u8[63]) -> bool {
    ac[0]  == u8:0 &&
    ac[1]  == u8:0 &&
    ac[2]  == u8:0 &&
    ac[3]  == u8:0 &&
    ac[4]  == u8:0 &&
    ac[5]  == u8:0 &&
    ac[6]  == u8:0 &&
    ac[7]  == u8:0 &&
    ac[8]  == u8:0 &&
    ac[9]  == u8:0 &&
    ac[10] == u8:0 &&
    ac[11] == u8:0 &&
    ac[12] == u8:0 &&
    ac[13] == u8:0 &&
    ac[14] == u8:0 &&
    ac[15] == u8:0 &&
    ac[16] == u8:0 &&
    ac[17] == u8:0 &&
    ac[18] == u8:0 &&
    ac[19] == u8:0 &&
    ac[20] == u8:0 &&
    ac[21] == u8:0 &&
    ac[22] == u8:0 &&
    ac[23] == u8:0 &&
    ac[24] == u8:0 &&
    ac[25] == u8:0 &&
    ac[26] == u8:0 &&
    ac[27] == u8:0 &&
    ac[28] == u8:0 &&
    ac[29] == u8:0 &&
    ac[30] == u8:0 &&
    ac[31] == u8:0 &&
    ac[32] == u8:0 &&
    ac[33] == u8:0 &&
    ac[34] == u8:0 &&
    ac[35] == u8:0 &&
    ac[36] == u8:0 &&
    ac[37] == u8:0 &&
    ac[38] == u8:0 &&
    ac[39] == u8:0 &&
    ac[40] == u8:0 &&
    ac[41] == u8:0 &&
    ac[42] == u8:0 &&
    ac[43] == u8:0 &&
    ac[44] == u8:0 &&
    ac[45] == u8:0 &&
    ac[46] == u8:0 &&
    ac[47] == u8:0 &&
    ac[48] == u8:0 &&
    ac[49] == u8:0 &&
    ac[50] == u8:0 &&
    ac[51] == u8:0 &&
    ac[52] == u8:0 &&
    ac[53] == u8:0 &&
    ac[54] == u8:0 &&
    ac[55] == u8:0 &&
    ac[56] == u8:0 &&
    ac[57] == u8:0 &&
    ac[58] == u8:0 &&
    ac[59] == u8:0 &&
    ac[60] == u8:0 &&
    ac[61] == u8:0 &&
    ac[62] == u8:0
  }
  

// AC 成分（63 要素）を取得する関数
fn get_ac(flat: u8[64]) -> u8[63] {
    let ac: u8[63] = [
        flat[1], flat[2], flat[3], flat[4], flat[5], flat[6], flat[7], flat[8],
        flat[9], flat[10], flat[11], flat[12], flat[13], flat[14], flat[15], flat[16],
        flat[17], flat[18], flat[19], flat[20], flat[21], flat[22], flat[23], flat[24],
        flat[25], flat[26], flat[27], flat[28], flat[29], flat[30], flat[31], flat[32],
        flat[33], flat[34], flat[35], flat[36], flat[37], flat[38], flat[39], flat[40],
        flat[41], flat[42], flat[43], flat[44], flat[45], flat[46], flat[47], flat[48],
        flat[49], flat[50], flat[51], flat[52], flat[53], flat[54], flat[55], flat[56],
        flat[57], flat[58], flat[59], flat[60], flat[61], flat[62], flat[63]
    ];
    ac
}

// AC 配列 ac のうち、インデックス start から連続する 0 の数をカウントする
// AC 配列 ac のうち、インデックス start から連続する 0 の数をカウントする関数
// 最大で15個までカウントし、途中で0以外の値が出たらそこで打ち切る
fn count_run(ac: u8[63], start: u32) -> u32 {
    if start >= u32:63 {
      u32:0
    } else if ac[start] != u8:0 {
      u32:0
    } else if start + u32:1 >= u32:63 || ac[start + u32:1] != u8:0 {
      u32:1
    } else if start + u32:2 >= u32:63 || ac[start + u32:2] != u8:0 {
      u32:2
    } else if start + u32:3 >= u32:63 || ac[start + u32:3] != u8:0 {
      u32:3
    } else if start + u32:4 >= u32:63 || ac[start + u32:4] != u8:0 {
      u32:4
    } else if start + u32:5 >= u32:63 || ac[start + u32:5] != u8:0 {
      u32:5
    } else if start + u32:6 >= u32:63 || ac[start + u32:6] != u8:0 {
      u32:6
    } else if start + u32:7 >= u32:63 || ac[start + u32:7] != u8:0 {
      u32:7
    } else if start + u32:8 >= u32:63 || ac[start + u32:8] != u8:0 {
      u32:8
    } else if start + u32:9 >= u32:63 || ac[start + u32:9] != u8:0 {
      u32:9
    } else if start + u32:10 >= u32:63 || ac[start + u32:10] != u8:0 {
      u32:10
    } else if start + u32:11 >= u32:63 || ac[start + u32:11] != u8:0 {
      u32:11
    } else if start + u32:12 >= u32:63 || ac[start + u32:12] != u8:0 {
      u32:12
    } else if start + u32:13 >= u32:63 || ac[start + u32:13] != u8:0 {
      u32:13
    } else if start + u32:14 >= u32:63 || ac[start + u32:14] != u8:0 {
      u32:14
    } else {
      u32:15
    }
  }
  
// ビット数を求める関数
fn bit_length(x: u8) -> u32 {
    if x == u8:0 {
        u32:0
    } else if x >= u8:128 {
        u32:8
    } else if x >= u8:64 {
        u32:7
    } else if x >= u8:32 {
        u32:6
    } else if x >= u8:16 {
        u32:5
    } else if x >= u8:8 {
        u32:4
    } else if x >= u8:4 {
        u32:3
    } else if x >= u8:2 {
        u32:2
    } else {
        u32:1
    }
}

// 0〜15 の整数を 16 進数の文字 (0-9, A-F) に変換
fn to_hex_digit(x: u32) -> u8 {
    if x < u32:10 {
        u8:48 + (x as u8)  // '0' (48) 〜 '9' (57)
    } else {
        u8:55 + (x as u8)  // 'A' (65) 〜 'F' (70)
    }
}

// run_size_str を符号化
fn encode_run_size(run: u32, size: u32) -> u8[2] {
    [to_hex_digit(run), to_hex_digit(size)]
}




// value を符号反転して符号化
fn encode_value(value: u8) -> bits[8] {
    let bit_0: bits[1] = ((value >> u8:7) & u8:1) as bits[1];
    let bit_1: bits[1] = ((value >> u8:6) & u8:1) as bits[1];
    let bit_2: bits[1] = ((value >> u8:5) & u8:1) as bits[1];
    let bit_3: bits[1] = ((value >> u8:4) & u8:1) as bits[1];
    let bit_4: bits[1] = ((value >> u8:3) & u8:1) as bits[1];
    let bit_5: bits[1] = ((value >> u8:2) & u8:1) as bits[1];
    let bit_6: bits[1] = ((value >> u8:1) & u8:1) as bits[1];
    let bit_7: bits[1] = ((value >> u8:0) & u8:1) as bits[1];

    let bits_value: bits[8] =
        (bit_0 as bits[8] << bits[8]:7) |
        (bit_1 as bits[8] << bits[8]:6) |
        (bit_2 as bits[8] << bits[8]:5) |
        (bit_3 as bits[8] << bits[8]:4) |
        (bit_4 as bits[8] << bits[8]:3) |
        (bit_5 as bits[8] << bits[8]:2) |
        (bit_6 as bits[8] << bits[8]:1) |
        (bit_7 as bits[8]);

    bits_value
}

// AC 成分の Huffman 符号化（ループなし）
fn encode_ac(ac_data: u8[63], is_luminance: bool) -> (bits[16], u8, bits[8]) {
    let run: u32 = count_run(ac_data, u32:0);
    trace!(ac_data);
    trace!(run);

    // すべて 0 なら EOB を返す
    if run == u32:63 {
        (EOB_LUM_EXT, u8:4, bits[8]:0)
    } else {
        let value: u8 = ac_data[run];  // `run` の次の非ゼロ値
        let size: u32 = bit_length(value);
        //let run_size_str: u8[2] = encode_run_size(run, size);
        let run_size_str: u8 = u8:1;

        trace!(value);
        trace!(size);
        trace!(run_size_str);

        // Huffman テーブルを参照
        let (huffman_code_full, huffman_length): (bits[16], u8) =
            if is_luminance {
                lookup_ACLuminanceToCode(run_size_str)
            } else {
                lookup_ACChrominanceToCode(run_size_str)
            };

        trace!(huffman_code_full);
        trace!(huffman_length);    

        let ac_value_s16 = value as s16;
        
        let code_list: bits[8] =
        if ac_value_s16 <= s16:0 {
            let bin_value: bits[8] = value as bits[8];
            let flipped: bits[8] = !bin_value; // 反転
            flipped
        } else {
            let bin_value: bits[8] = value as bits[8];
            bin_value
        };
    
        trace!(code_list);

        (huffman_code_full, huffman_length, code_list)
    }
}

// メイン関数
fn Huffman_ACenc(matrix: u8[8][8]) -> (bits[16], u8, bits[8]) {
    let flat: u8[64] = flatten(matrix);
    let ac: u8[63] = get_ac(flat);

    if is_all_zero(ac) {
        (bits[16]:0b1100, u8:4, bits[8]:0)  // EOB（ルミナンス用）
    } else {
        encode_ac(ac, true)  // Luminance 用 Huffman 符号化
    }
}

// =======================
// 以下はテストケース
// =======================
#[test]
fn test0_Huffman_enc() {
    let test_matrix: u8[8][8] = [
        [u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0],
        [u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0],
        [u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0],
        [u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0],
        [u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0],
        [u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0],
        [u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0],
        [u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0]
    ];

    let expected_output: bits[16] = bits[16]:0b1100;     
    let expected_length: u8 = u8:4;             
    let expected_code: bits[8] = bits[8]:0b000;             
    let (actual_output, actual_length, actual_code): (bits[16], u8, bits[8]) = Huffman_ACenc(test_matrix);  

    trace!(actual_output);
    trace!(actual_length);
    trace!(actual_code);

    assert_eq(actual_output, expected_output);
    assert_eq(actual_length, expected_length);
    assert_eq(actual_code, expected_code);
}

#[test]
fn test1_Huffman_enc() {
    let test_matrix: u8[8][8] = [
        [u8:2, u8:0, u8:0, u8:8, u8:0, u8:0, u8:0, u8:0],
        [u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0],
        [u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0],
        [u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0],
        [u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0],
        [u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0],
        [u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0],
        [u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0]
    ];

    let expected_output: bits[16] = bits[16]:0b0001;  
    let expected_length: u8 = u8:2;         
    let expected_code: bits[8] = bits[8]:0b000_1000;    
    let (actual_output, actual_length, actual_code): (bits[16], u8, bits[8]) = Huffman_ACenc(test_matrix);  

    trace!(actual_output);
    trace!(actual_length);
    trace!(actual_code);

    assert_eq(actual_output, expected_output);
    assert_eq(actual_length, expected_length);
    assert_eq(actual_code, expected_code);
}

// =======================
// 過去のテストケース
// =======================
#[test]
fn test_encode_run_size() {
  let run: u32 = u32:10;
  let size: u32 = u32:2;
  let result: u8[2] = encode_run_size(run, size);
  // 期待される結果は ['A', '2'] つまり [u8:65, u8:50]
  let expected: u8[2] = [u8:65, u8:50];
  assert_eq(result, expected);
}

#[test]
fn test_count_run() {
    let ac1: u8[63] = [ // 先頭 10 個が 0
        u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0,
        u8:5, u8:6, u8:7, u8:8, u8:9, u8:10, u8:11, u8:12, u8:13, u8:14,
        u8:15, u8:16, u8:17, u8:18, u8:19, u8:20, u8:21, u8:22, u8:23, u8:24,
        u8:25, u8:26, u8:27, u8:28, u8:29, u8:30, u8:31, u8:32, u8:33, u8:34,
        u8:35, u8:36, u8:37, u8:38, u8:39, u8:40, u8:41, u8:42, u8:43, u8:44,
        u8:45, u8:46, u8:47, u8:48, u8:49, u8:50, u8:51, u8:52, u8:53, u8:3,
        u8:45, u8:46, u8:47
    ];
    
    let ac2: u8[63] = [ // 先頭 15 個が 0
        u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0,
        u8:0, u8:0, u8:0, u8:0, u8:0,
        u8:1, u8:2, u8:3, u8:4, u8:5, u8:6, u8:7, u8:8, u8:9, u8:10,
        u8:11, u8:12, u8:13, u8:14, u8:15, u8:16, u8:17, u8:18, u8:19, u8:20,
        u8:21, u8:22, u8:23, u8:24, u8:25, u8:26, u8:27, u8:28, u8:29, u8:30,
        u8:31, u8:32, u8:33, u8:34, u8:35, u8:36, u8:37, u8:38, u8:39, u8:40,
        u8:41, u8:42, u8:43, u8:44, u8:45, u8:43, u8:44, u8:45
    ];

    let ac3: u8[63] = [ // すべて 0
        u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0,
        u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0,
        u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0,
        u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0,
        u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0,
        u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0, u8:0,
        u8:43, u8:44, u8:45, u8:5
    ];
    
    let ac4: u8[63] = [ // すべて 0 ではない
        u8:1, u8:2, u8:3, u8:4, u8:5, u8:6, u8:7, u8:8, u8:9, u8:10,
        u8:11, u8:12, u8:13, u8:14, u8:15, u8:16, u8:17, u8:18, u8:19, u8:20,
        u8:21, u8:22, u8:23, u8:24, u8:25, u8:26, u8:27, u8:28, u8:29, u8:30,
        u8:31, u8:32, u8:33, u8:34, u8:35, u8:36, u8:37, u8:38, u8:39, u8:40,
        u8:41, u8:42, u8:43, u8:44, u8:45, u8:46, u8:47, u8:48, u8:49, u8:50,
        u8:51, u8:52, u8:53, u8:54, u8:55, u8:56, u8:57, u8:58, u8:59, u8:5,
        u8:51, u8:52, u8:53
    ];

    let ac5: u8[63] = [ // 先頭 2個が 0
        u8:0, u8:0, u8:1, u8:1, u8:1, u8:0, u8:0, u8:0, u8:0, u8:0,
        u8:5, u8:6, u8:7, u8:8, u8:9, u8:10, u8:11, u8:12, u8:13, u8:14,
        u8:15, u8:16, u8:17, u8:18, u8:19, u8:20, u8:21, u8:22, u8:23, u8:24,
        u8:25, u8:26, u8:27, u8:28, u8:29, u8:30, u8:31, u8:32, u8:33, u8:34,
        u8:35, u8:36, u8:37, u8:38, u8:39, u8:40, u8:41, u8:42, u8:43, u8:44,
        u8:45, u8:46, u8:47, u8:48, u8:49, u8:50, u8:51, u8:52, u8:53, u8:3,
        u8:45, u8:46, u8:47
    ];

    // 各テストケース
    let result1: u32 = count_run(ac1, u32:0);
    let result2: u32 = count_run(ac2, u32:0);
    let result3: u32 = count_run(ac3, u32:0);
    let result4: u32 = count_run(ac4, u32:0);
    let result5: u32 = count_run(ac5, u32:0);

    trace!(result1);
    trace!(result2);
    trace!(result3);
    trace!(result4);
    trace!(result5);

    // 期待値と比較
    assert_eq(result1, u32:10); // 最初の 10 個が 0
    assert_eq(result2, u32:15); // 最初の 15 個が 0
    assert_eq(result3, u32:15); // すべて 0 でも最大 15 まで
    assert_eq(result4, u32:0);  // すべて 0 でない
    assert_eq(result5, u32:2);  
}
